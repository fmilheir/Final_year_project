// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
	"github.com/jinzhu/gorm"
		 _ "github.com/jinzhu/gorm/dialects/postgres" 
)

// Characteristic Describes a given characteristic of an object or entity through a name/value pair.
//
// swagger:model Characteristic
type Characteristic struct {
	gorm.Model

	// When sub-classing, this defines the super-class
	AtBaseType string `json:"@baseType,omitempty"`

	// A URI to a JSON-Schema file that defines additional attributes and relationships
	// Format: uri
	AtSchemaLocation strfmt.URI `json:"@schemaLocation,omitempty"`

	// When sub-classing, this defines the sub-class Extensible name
	AtType string `json:"@type,omitempty"`

	// characteristic relationship
	CharacteristicRelationship []*CharacteristicRelationship `json:"characteristicRelationship" gorm:"foreignKey:ID"`

	// Unique identifier of the characteristic
	ID string `json:"id,omitempty"`

	// Name of the characteristic
	// Required: true
	Name *string `json:"name"`

	// The value of the characteristic
	// Required: true
	Value Any `json:"value" gorm:"type:jsonb"`

	// Data type of the value of the characteristic
	ValueType string `json:"valueType,omitempty"`
}

// Validate validates this characteristic
func (m *Characteristic) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAtSchemaLocation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCharacteristicRelationship(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Characteristic) validateAtSchemaLocation(formats strfmt.Registry) error {
	if swag.IsZero(m.AtSchemaLocation) { // not required
		return nil
	}

	if err := validate.FormatOf("@schemaLocation", "body", "uri", m.AtSchemaLocation.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Characteristic) validateCharacteristicRelationship(formats strfmt.Registry) error {
	if swag.IsZero(m.CharacteristicRelationship) { // not required
		return nil
	}

	for i := 0; i < len(m.CharacteristicRelationship); i++ {
		if swag.IsZero(m.CharacteristicRelationship[i]) { // not required
			continue
		}

		if m.CharacteristicRelationship[i] != nil {
			if err := m.CharacteristicRelationship[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("characteristicRelationship" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("characteristicRelationship" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Characteristic) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *Characteristic) validateValue(formats strfmt.Registry) error {

	if m.Value == nil {
		return errors.Required("value", "body", nil)
	}

	return nil
}

// ContextValidate validate this characteristic based on the context it is used
func (m *Characteristic) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCharacteristicRelationship(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Characteristic) contextValidateCharacteristicRelationship(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.CharacteristicRelationship); i++ {

		if m.CharacteristicRelationship[i] != nil {

			if swag.IsZero(m.CharacteristicRelationship[i]) { // not required
				return nil
			}

			if err := m.CharacteristicRelationship[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("characteristicRelationship" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("characteristicRelationship" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Characteristic) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Characteristic) UnmarshalBinary(b []byte) error {
	var res Characteristic
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
