// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// IncidentStateType Possible values for the state of an Incident
//
// swagger:model IncidentStateType
type IncidentStateType string

func NewIncidentStateType(value IncidentStateType) *IncidentStateType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated IncidentStateType.
func (m IncidentStateType) Pointer() *IncidentStateType {
	return &m
}

const (

	// IncidentStateTypeRaised captures enum value "raised"
	IncidentStateTypeRaised IncidentStateType = "raised"

	// IncidentStateTypeUpdated captures enum value "updated"
	IncidentStateTypeUpdated IncidentStateType = "updated"

	// IncidentStateTypeCleared captures enum value "cleared"
	IncidentStateTypeCleared IncidentStateType = "cleared"
)

// for schema
var incidentStateTypeEnum []interface{}

func init() {
	var res []IncidentStateType
	if err := json.Unmarshal([]byte(`["raised","updated","cleared"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		incidentStateTypeEnum = append(incidentStateTypeEnum, v)
	}
}

func (m IncidentStateType) validateIncidentStateTypeEnum(path, location string, value IncidentStateType) error {
	if err := validate.EnumCase(path, location, value, incidentStateTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this incident state type
func (m IncidentStateType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateIncidentStateTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this incident state type based on context it is used
func (m IncidentStateType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
