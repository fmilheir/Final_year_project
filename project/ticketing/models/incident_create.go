// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IncidentCreate An Incident is a record of an event that has altered the operational state of a entity (Resource, Service or Customers Product). An incident represents an issue that needs to be diagnosed and resolved.
// Skipped properties: id,href,lifecycleStatus,creationDate,statusChangeDate
//
// swagger:model Incident_Create
type IncidentCreate struct {

	// When sub-classing, this defines the super-class
	AtBaseType string `json:"@baseType,omitempty"`

	// A URI to a JSON-Schema file that defines additional attributes and relationships
	// Format: uri
	AtSchemaLocation strfmt.URI `json:"@schemaLocation,omitempty"`

	// When sub-classing, this defines the sub-class Extensible name
	AtType string `json:"@type,omitempty"`

	// Provides the Acknowledgement State of the incident (unacknowledged | acknowledged).
	// Required: true
	AckState *IncidentAckStateType `json:"ackState"`

	// The ackTime or acknowledgeTime of the incident. An acknowledged incident is being worked on, but is not yet resolved
	// Example: 2022-03-10T04:01:12Z
	// Format: date-time
	AckTime strfmt.DateTime `json:"ackTime,omitempty"`

	// List of affected entities
	// Example: e.g  a ref to a service or resource
	AffectedEntity []*EntityRef `json:"affectedEntity"`

	// The category of the incident  (category is the term used by ITU)
	// Example: BTS Software Fault
	// Required: true
	Category *string `json:"category"`

	// The clear time of the incident
	// Example: 2022-03-10T04:01:12Z
	// Format: date-time
	ClearTime strfmt.DateTime `json:"clearTime,omitempty"`

	// The domain of the incident, for example RAN, PON, OTN, Cross-Domain etc
	// Required: true
	Domain *string `json:"domain"`

	// The correlation event object such as alarm, externalAlarm, performance, etc.
	EventID []*ResourceEntity `json:"eventId"`

	// This is used for extend the incident with attributes
	ExtensionInfo []*Characteristic `json:"extensionInfo"`

	// An identification of an entity that is owned by or originates in a software system different from the current system, for example a ProductOrder handed off from a commerce platform into an order handling system. The structure identifies the system itself, the nature of the entity within the system (e.g. class name) and the unique ID of the entity within the system. It is anticipated that multiple external IDs can be held for a single entity, e.g. if the entity passed through multiple systems on the way to the current system. In this case the consumer is expected to sequence the IDs in the array in reverse order of provenance, i.e. most recent system first in the list.
	ExternalIdentifier []*ExternalIdentifier `json:"externalIdentifier"`

	// Impact which indicates the degree of impact on affected services or users. This field is optional. The options are extensive, significant, moderate, and minor
	Impact ImpactType `json:"impact,omitempty"`

	// A textual succinct description of the nature, symptoms, cause, or effect of the incident.
	IncidentDetail string `json:"incidentDetail"`

	// Incident resolution suggestion or tip to resolve the incident
	IncidentResolutionSuggestion string `json:"incidentResolutionSuggestion,omitempty"`

	// The name of the incident. A short-form string that provides succinct, important information about the incident
	// Required: true
	Name *string `json:"name"`

	// Indicates the time (as a date + time) at which the incident occurred at its source
	// Example: 2022-03-10T04:01:12Z
	// Required: true
	// Format: date-time
	OccurTime *strfmt.DateTime `json:"occurTime"`

	// The priority  of the incident, priority  critical/high/medium/low
	// Required: true
	Priority *PriorityType `json:"priority"`

	// A root cause is a fundamental or underlying reason behind why an incident occurred that identifies one or more failures. An incident many have multiple rootCauses
	RootCause []*RootCause `json:"rootCause"`

	// The root event object such as alarm, externalAlarm, performance, etc.
	RootEventID []*ResourceEntity `json:"rootEventId"`

	// The objects show the incident, it may be part of Network Equipment. Fault object, which may be an NE or a port.
	// Example: e.g. weak optical signals, the fault object is a PON port, the root cause is an optical splitter, and the affected object is an ONU
	// Required: true
	// Min Items: 1
	SourceObject []*ResourceEntity `json:"sourceObject"`

	// Incident state. The options are raised | updated | cleared. Cleared means Resolved)
	// Required: true
	State *IncidentStateType `json:"state"`

	// The last update time  of the incident
	// Example: 2022-03-10T04:01:12Z
	UpdateTime string `json:"updateTime,omitempty"`

	// Urgency is the speed required for resolving the service issues. A measure of how long it will be until an incident has a significant impact on the business. This field is optional. The options are critical, high, medium, and low
	Urgency UrgencyType `json:"urgency,omitempty"`
}

// Validate validates this incident create
func (m *IncidentCreate) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAtSchemaLocation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAckState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAckTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAffectedEntity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCategory(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClearTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDomain(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEventID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExtensionInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExternalIdentifier(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImpact(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOccurTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePriority(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRootCause(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRootEventID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSourceObject(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUrgency(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IncidentCreate) validateAtSchemaLocation(formats strfmt.Registry) error {
	if swag.IsZero(m.AtSchemaLocation) { // not required
		return nil
	}

	if err := validate.FormatOf("@schemaLocation", "body", "uri", m.AtSchemaLocation.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *IncidentCreate) validateAckState(formats strfmt.Registry) error {

	if err := validate.Required("ackState", "body", m.AckState); err != nil {
		return err
	}

	if err := validate.Required("ackState", "body", m.AckState); err != nil {
		return err
	}

	if m.AckState != nil {
		if err := m.AckState.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ackState")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ackState")
			}
			return err
		}
	}

	return nil
}

func (m *IncidentCreate) validateAckTime(formats strfmt.Registry) error {
	if swag.IsZero(m.AckTime) { // not required
		return nil
	}

	if err := validate.FormatOf("ackTime", "body", "date-time", m.AckTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *IncidentCreate) validateAffectedEntity(formats strfmt.Registry) error {
	if swag.IsZero(m.AffectedEntity) { // not required
		return nil
	}

	for i := 0; i < len(m.AffectedEntity); i++ {
		if swag.IsZero(m.AffectedEntity[i]) { // not required
			continue
		}

		if m.AffectedEntity[i] != nil {
			if err := m.AffectedEntity[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("affectedEntity" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("affectedEntity" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *IncidentCreate) validateCategory(formats strfmt.Registry) error {

	if err := validate.Required("category", "body", m.Category); err != nil {
		return err
	}

	return nil
}

func (m *IncidentCreate) validateClearTime(formats strfmt.Registry) error {
	if swag.IsZero(m.ClearTime) { // not required
		return nil
	}

	if err := validate.FormatOf("clearTime", "body", "date-time", m.ClearTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *IncidentCreate) validateDomain(formats strfmt.Registry) error {

	if err := validate.Required("domain", "body", m.Domain); err != nil {
		return err
	}

	return nil
}

func (m *IncidentCreate) validateEventID(formats strfmt.Registry) error {
	if swag.IsZero(m.EventID) { // not required
		return nil
	}

	for i := 0; i < len(m.EventID); i++ {
		if swag.IsZero(m.EventID[i]) { // not required
			continue
		}

		if m.EventID[i] != nil {
			if err := m.EventID[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("eventId" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("eventId" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *IncidentCreate) validateExtensionInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.ExtensionInfo) { // not required
		return nil
	}

	for i := 0; i < len(m.ExtensionInfo); i++ {
		if swag.IsZero(m.ExtensionInfo[i]) { // not required
			continue
		}

		if m.ExtensionInfo[i] != nil {
			if err := m.ExtensionInfo[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("extensionInfo" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("extensionInfo" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *IncidentCreate) validateExternalIdentifier(formats strfmt.Registry) error {
	if swag.IsZero(m.ExternalIdentifier) { // not required
		return nil
	}

	for i := 0; i < len(m.ExternalIdentifier); i++ {
		if swag.IsZero(m.ExternalIdentifier[i]) { // not required
			continue
		}

		if m.ExternalIdentifier[i] != nil {
			if err := m.ExternalIdentifier[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("externalIdentifier" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("externalIdentifier" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *IncidentCreate) validateImpact(formats strfmt.Registry) error {
	if swag.IsZero(m.Impact) { // not required
		return nil
	}

	if err := m.Impact.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("impact")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("impact")
		}
		return err
	}

	return nil
}

func (m *IncidentCreate) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *IncidentCreate) validateOccurTime(formats strfmt.Registry) error {

	if err := validate.Required("occurTime", "body", m.OccurTime); err != nil {
		return err
	}

	if err := validate.FormatOf("occurTime", "body", "date-time", m.OccurTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *IncidentCreate) validatePriority(formats strfmt.Registry) error {

	if err := validate.Required("priority", "body", m.Priority); err != nil {
		return err
	}

	if err := validate.Required("priority", "body", m.Priority); err != nil {
		return err
	}

	if m.Priority != nil {
		if err := m.Priority.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("priority")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("priority")
			}
			return err
		}
	}

	return nil
}

func (m *IncidentCreate) validateRootCause(formats strfmt.Registry) error {
	if swag.IsZero(m.RootCause) { // not required
		return nil
	}

	for i := 0; i < len(m.RootCause); i++ {
		if swag.IsZero(m.RootCause[i]) { // not required
			continue
		}

		if m.RootCause[i] != nil {
			if err := m.RootCause[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("rootCause" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("rootCause" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *IncidentCreate) validateRootEventID(formats strfmt.Registry) error {
	if swag.IsZero(m.RootEventID) { // not required
		return nil
	}

	for i := 0; i < len(m.RootEventID); i++ {
		if swag.IsZero(m.RootEventID[i]) { // not required
			continue
		}

		if m.RootEventID[i] != nil {
			if err := m.RootEventID[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("rootEventId" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("rootEventId" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *IncidentCreate) validateSourceObject(formats strfmt.Registry) error {

	if err := validate.Required("sourceObject", "body", m.SourceObject); err != nil {
		return err
	}

	iSourceObjectSize := int64(len(m.SourceObject))

	if err := validate.MinItems("sourceObject", "body", iSourceObjectSize, 1); err != nil {
		return err
	}

	for i := 0; i < len(m.SourceObject); i++ {
		if swag.IsZero(m.SourceObject[i]) { // not required
			continue
		}

		if m.SourceObject[i] != nil {
			if err := m.SourceObject[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("sourceObject" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("sourceObject" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *IncidentCreate) validateState(formats strfmt.Registry) error {

	if err := validate.Required("state", "body", m.State); err != nil {
		return err
	}

	if err := validate.Required("state", "body", m.State); err != nil {
		return err
	}

	if m.State != nil {
		if err := m.State.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("state")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("state")
			}
			return err
		}
	}

	return nil
}

func (m *IncidentCreate) validateUrgency(formats strfmt.Registry) error {
	if swag.IsZero(m.Urgency) { // not required
		return nil
	}

	if err := m.Urgency.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("urgency")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("urgency")
		}
		return err
	}

	return nil
}

// ContextValidate validate this incident create based on the context it is used
func (m *IncidentCreate) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAckState(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAffectedEntity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEventID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateExtensionInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateExternalIdentifier(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateImpact(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePriority(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRootCause(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRootEventID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSourceObject(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateState(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUrgency(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IncidentCreate) contextValidateAckState(ctx context.Context, formats strfmt.Registry) error {

	if m.AckState != nil {

		if err := m.AckState.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ackState")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ackState")
			}
			return err
		}
	}

	return nil
}

func (m *IncidentCreate) contextValidateAffectedEntity(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AffectedEntity); i++ {

		if m.AffectedEntity[i] != nil {

			if swag.IsZero(m.AffectedEntity[i]) { // not required
				return nil
			}

			if err := m.AffectedEntity[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("affectedEntity" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("affectedEntity" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *IncidentCreate) contextValidateEventID(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.EventID); i++ {

		if m.EventID[i] != nil {

			if swag.IsZero(m.EventID[i]) { // not required
				return nil
			}

			if err := m.EventID[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("eventId" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("eventId" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *IncidentCreate) contextValidateExtensionInfo(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ExtensionInfo); i++ {

		if m.ExtensionInfo[i] != nil {

			if swag.IsZero(m.ExtensionInfo[i]) { // not required
				return nil
			}

			if err := m.ExtensionInfo[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("extensionInfo" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("extensionInfo" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *IncidentCreate) contextValidateExternalIdentifier(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ExternalIdentifier); i++ {

		if m.ExternalIdentifier[i] != nil {

			if swag.IsZero(m.ExternalIdentifier[i]) { // not required
				return nil
			}

			if err := m.ExternalIdentifier[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("externalIdentifier" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("externalIdentifier" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *IncidentCreate) contextValidateImpact(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Impact) { // not required
		return nil
	}

	if err := m.Impact.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("impact")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("impact")
		}
		return err
	}

	return nil
}

func (m *IncidentCreate) contextValidatePriority(ctx context.Context, formats strfmt.Registry) error {

	if m.Priority != nil {

		if err := m.Priority.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("priority")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("priority")
			}
			return err
		}
	}

	return nil
}

func (m *IncidentCreate) contextValidateRootCause(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.RootCause); i++ {

		if m.RootCause[i] != nil {

			if swag.IsZero(m.RootCause[i]) { // not required
				return nil
			}

			if err := m.RootCause[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("rootCause" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("rootCause" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *IncidentCreate) contextValidateRootEventID(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.RootEventID); i++ {

		if m.RootEventID[i] != nil {

			if swag.IsZero(m.RootEventID[i]) { // not required
				return nil
			}

			if err := m.RootEventID[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("rootEventId" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("rootEventId" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *IncidentCreate) contextValidateSourceObject(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.SourceObject); i++ {

		if m.SourceObject[i] != nil {

			if swag.IsZero(m.SourceObject[i]) { // not required
				return nil
			}

			if err := m.SourceObject[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("sourceObject" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("sourceObject" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *IncidentCreate) contextValidateState(ctx context.Context, formats strfmt.Registry) error {

	if m.State != nil {

		if err := m.State.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("state")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("state")
			}
			return err
		}
	}

	return nil
}

func (m *IncidentCreate) contextValidateUrgency(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Urgency) { // not required
		return nil
	}

	if err := m.Urgency.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("urgency")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("urgency")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IncidentCreate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IncidentCreate) UnmarshalBinary(b []byte) error {
	var res IncidentCreate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
