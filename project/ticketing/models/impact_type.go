// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ImpactType Possible values for the impact of an Incident
//
// swagger:model ImpactType
type ImpactType string

func NewImpactType(value ImpactType) *ImpactType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ImpactType.
func (m ImpactType) Pointer() *ImpactType {
	return &m
}

const (

	// ImpactTypeExtensive captures enum value "extensive"
	ImpactTypeExtensive ImpactType = "extensive"

	// ImpactTypeSignificant captures enum value "significant"
	ImpactTypeSignificant ImpactType = "significant"

	// ImpactTypeModerate captures enum value "moderate"
	ImpactTypeModerate ImpactType = "moderate"

	// ImpactTypeMinor captures enum value "minor"
	ImpactTypeMinor ImpactType = "minor"
)

// for schema
var impactTypeEnum []interface{}

func init() {
	var res []ImpactType
	if err := json.Unmarshal([]byte(`["extensive","significant","moderate","minor"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		impactTypeEnum = append(impactTypeEnum, v)
	}
}

func (m ImpactType) validateImpactTypeEnum(path, location string, value ImpactType) error {
	if err := validate.EnumCase(path, location, value, impactTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this impact type
func (m ImpactType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateImpactTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this impact type based on context it is used
func (m ImpactType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
