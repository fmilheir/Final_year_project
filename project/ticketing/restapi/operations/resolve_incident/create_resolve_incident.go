// Code generated by go-swagger; DO NOT EDIT.

package resolve_incident

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// CreateResolveIncidentHandlerFunc turns a function with the right signature into a create resolve incident handler
type CreateResolveIncidentHandlerFunc func(CreateResolveIncidentParams) middleware.Responder

// Handle executing the request and returning a response
func (fn CreateResolveIncidentHandlerFunc) Handle(params CreateResolveIncidentParams) middleware.Responder {
	return fn(params)
}

// CreateResolveIncidentHandler interface for that can handle valid create resolve incident params
type CreateResolveIncidentHandler interface {
	Handle(CreateResolveIncidentParams) middleware.Responder
}

// NewCreateResolveIncident creates a new http.Handler for the create resolve incident operation
func NewCreateResolveIncident(ctx *middleware.Context, handler CreateResolveIncidentHandler) *CreateResolveIncident {
	return &CreateResolveIncident{Context: ctx, Handler: handler}
}

/*
	CreateResolveIncident swagger:route POST /resolveIncident resolveIncident createResolveIncident

# Creates a ResolveIncident

This operation creates a ResolveIncident entity.
*/
type CreateResolveIncident struct {
	Context *middleware.Context
	Handler CreateResolveIncidentHandler
}

func (o *CreateResolveIncident) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewCreateResolveIncidentParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
