// Code generated by go-swagger; DO NOT EDIT.

package events_subscription

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// RegisterListenerHandlerFunc turns a function with the right signature into a register listener handler
type RegisterListenerHandlerFunc func(RegisterListenerParams) middleware.Responder

// Handle executing the request and returning a response
func (fn RegisterListenerHandlerFunc) Handle(params RegisterListenerParams) middleware.Responder {
	return fn(params)
}

// RegisterListenerHandler interface for that can handle valid register listener params
type RegisterListenerHandler interface {
	Handle(RegisterListenerParams) middleware.Responder
}

// NewRegisterListener creates a new http.Handler for the register listener operation
func NewRegisterListener(ctx *middleware.Context, handler RegisterListenerHandler) *RegisterListener {
	return &RegisterListener{Context: ctx, Handler: handler}
}

/*
	RegisterListener swagger:route POST /hub events subscription registerListener

# Register a listener

Sets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics.
*/
type RegisterListener struct {
	Context *middleware.Context
	Handler RegisterListenerHandler
}

func (o *RegisterListener) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewRegisterListenerParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
