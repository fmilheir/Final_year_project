// Code generated by go-swagger; DO NOT EDIT.

package diagnose_incident

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	"fmilheir/test_swagger/models"
)

// ListDiagnoseIncidentOKCode is the HTTP code returned for type ListDiagnoseIncidentOK
const ListDiagnoseIncidentOKCode int = 200

/*
ListDiagnoseIncidentOK Success

swagger:response listDiagnoseIncidentOK
*/
type ListDiagnoseIncidentOK struct {
	/*Actual number of items returned in the response body

	 */
	XResultCount int64 `json:"X-Result-Count"`
	/*Total number of items matching criteria

	 */
	XTotalCount int64 `json:"X-Total-Count"`

	/*
	  In: Body
	*/
	Payload []*models.DiagnoseIncident `json:"body,omitempty"`
}

// NewListDiagnoseIncidentOK creates ListDiagnoseIncidentOK with default headers values
func NewListDiagnoseIncidentOK() *ListDiagnoseIncidentOK {

	return &ListDiagnoseIncidentOK{}
}

// WithXResultCount adds the xResultCount to the list diagnose incident o k response
func (o *ListDiagnoseIncidentOK) WithXResultCount(xResultCount int64) *ListDiagnoseIncidentOK {
	o.XResultCount = xResultCount
	return o
}

// SetXResultCount sets the xResultCount to the list diagnose incident o k response
func (o *ListDiagnoseIncidentOK) SetXResultCount(xResultCount int64) {
	o.XResultCount = xResultCount
}

// WithXTotalCount adds the xTotalCount to the list diagnose incident o k response
func (o *ListDiagnoseIncidentOK) WithXTotalCount(xTotalCount int64) *ListDiagnoseIncidentOK {
	o.XTotalCount = xTotalCount
	return o
}

// SetXTotalCount sets the xTotalCount to the list diagnose incident o k response
func (o *ListDiagnoseIncidentOK) SetXTotalCount(xTotalCount int64) {
	o.XTotalCount = xTotalCount
}

// WithPayload adds the payload to the list diagnose incident o k response
func (o *ListDiagnoseIncidentOK) WithPayload(payload []*models.DiagnoseIncident) *ListDiagnoseIncidentOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list diagnose incident o k response
func (o *ListDiagnoseIncidentOK) SetPayload(payload []*models.DiagnoseIncident) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListDiagnoseIncidentOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Result-Count

	xResultCount := swag.FormatInt64(o.XResultCount)
	if xResultCount != "" {
		rw.Header().Set("X-Result-Count", xResultCount)
	}

	// response header X-Total-Count

	xTotalCount := swag.FormatInt64(o.XTotalCount)
	if xTotalCount != "" {
		rw.Header().Set("X-Total-Count", xTotalCount)
	}

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		// return empty array
		payload = make([]*models.DiagnoseIncident, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// ListDiagnoseIncidentBadRequestCode is the HTTP code returned for type ListDiagnoseIncidentBadRequest
const ListDiagnoseIncidentBadRequestCode int = 400

/*
ListDiagnoseIncidentBadRequest Bad Request

swagger:response listDiagnoseIncidentBadRequest
*/
type ListDiagnoseIncidentBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewListDiagnoseIncidentBadRequest creates ListDiagnoseIncidentBadRequest with default headers values
func NewListDiagnoseIncidentBadRequest() *ListDiagnoseIncidentBadRequest {

	return &ListDiagnoseIncidentBadRequest{}
}

// WithPayload adds the payload to the list diagnose incident bad request response
func (o *ListDiagnoseIncidentBadRequest) WithPayload(payload *models.Error) *ListDiagnoseIncidentBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list diagnose incident bad request response
func (o *ListDiagnoseIncidentBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListDiagnoseIncidentBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ListDiagnoseIncidentUnauthorizedCode is the HTTP code returned for type ListDiagnoseIncidentUnauthorized
const ListDiagnoseIncidentUnauthorizedCode int = 401

/*
ListDiagnoseIncidentUnauthorized Unauthorized

swagger:response listDiagnoseIncidentUnauthorized
*/
type ListDiagnoseIncidentUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewListDiagnoseIncidentUnauthorized creates ListDiagnoseIncidentUnauthorized with default headers values
func NewListDiagnoseIncidentUnauthorized() *ListDiagnoseIncidentUnauthorized {

	return &ListDiagnoseIncidentUnauthorized{}
}

// WithPayload adds the payload to the list diagnose incident unauthorized response
func (o *ListDiagnoseIncidentUnauthorized) WithPayload(payload *models.Error) *ListDiagnoseIncidentUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list diagnose incident unauthorized response
func (o *ListDiagnoseIncidentUnauthorized) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListDiagnoseIncidentUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ListDiagnoseIncidentForbiddenCode is the HTTP code returned for type ListDiagnoseIncidentForbidden
const ListDiagnoseIncidentForbiddenCode int = 403

/*
ListDiagnoseIncidentForbidden Forbidden

swagger:response listDiagnoseIncidentForbidden
*/
type ListDiagnoseIncidentForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewListDiagnoseIncidentForbidden creates ListDiagnoseIncidentForbidden with default headers values
func NewListDiagnoseIncidentForbidden() *ListDiagnoseIncidentForbidden {

	return &ListDiagnoseIncidentForbidden{}
}

// WithPayload adds the payload to the list diagnose incident forbidden response
func (o *ListDiagnoseIncidentForbidden) WithPayload(payload *models.Error) *ListDiagnoseIncidentForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list diagnose incident forbidden response
func (o *ListDiagnoseIncidentForbidden) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListDiagnoseIncidentForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ListDiagnoseIncidentNotFoundCode is the HTTP code returned for type ListDiagnoseIncidentNotFound
const ListDiagnoseIncidentNotFoundCode int = 404

/*
ListDiagnoseIncidentNotFound Not Found

swagger:response listDiagnoseIncidentNotFound
*/
type ListDiagnoseIncidentNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewListDiagnoseIncidentNotFound creates ListDiagnoseIncidentNotFound with default headers values
func NewListDiagnoseIncidentNotFound() *ListDiagnoseIncidentNotFound {

	return &ListDiagnoseIncidentNotFound{}
}

// WithPayload adds the payload to the list diagnose incident not found response
func (o *ListDiagnoseIncidentNotFound) WithPayload(payload *models.Error) *ListDiagnoseIncidentNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list diagnose incident not found response
func (o *ListDiagnoseIncidentNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListDiagnoseIncidentNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ListDiagnoseIncidentMethodNotAllowedCode is the HTTP code returned for type ListDiagnoseIncidentMethodNotAllowed
const ListDiagnoseIncidentMethodNotAllowedCode int = 405

/*
ListDiagnoseIncidentMethodNotAllowed Method Not allowed

swagger:response listDiagnoseIncidentMethodNotAllowed
*/
type ListDiagnoseIncidentMethodNotAllowed struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewListDiagnoseIncidentMethodNotAllowed creates ListDiagnoseIncidentMethodNotAllowed with default headers values
func NewListDiagnoseIncidentMethodNotAllowed() *ListDiagnoseIncidentMethodNotAllowed {

	return &ListDiagnoseIncidentMethodNotAllowed{}
}

// WithPayload adds the payload to the list diagnose incident method not allowed response
func (o *ListDiagnoseIncidentMethodNotAllowed) WithPayload(payload *models.Error) *ListDiagnoseIncidentMethodNotAllowed {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list diagnose incident method not allowed response
func (o *ListDiagnoseIncidentMethodNotAllowed) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListDiagnoseIncidentMethodNotAllowed) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(405)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ListDiagnoseIncidentConflictCode is the HTTP code returned for type ListDiagnoseIncidentConflict
const ListDiagnoseIncidentConflictCode int = 409

/*
ListDiagnoseIncidentConflict Conflict

swagger:response listDiagnoseIncidentConflict
*/
type ListDiagnoseIncidentConflict struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewListDiagnoseIncidentConflict creates ListDiagnoseIncidentConflict with default headers values
func NewListDiagnoseIncidentConflict() *ListDiagnoseIncidentConflict {

	return &ListDiagnoseIncidentConflict{}
}

// WithPayload adds the payload to the list diagnose incident conflict response
func (o *ListDiagnoseIncidentConflict) WithPayload(payload *models.Error) *ListDiagnoseIncidentConflict {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list diagnose incident conflict response
func (o *ListDiagnoseIncidentConflict) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListDiagnoseIncidentConflict) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(409)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ListDiagnoseIncidentInternalServerErrorCode is the HTTP code returned for type ListDiagnoseIncidentInternalServerError
const ListDiagnoseIncidentInternalServerErrorCode int = 500

/*
ListDiagnoseIncidentInternalServerError Internal Server Error

swagger:response listDiagnoseIncidentInternalServerError
*/
type ListDiagnoseIncidentInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewListDiagnoseIncidentInternalServerError creates ListDiagnoseIncidentInternalServerError with default headers values
func NewListDiagnoseIncidentInternalServerError() *ListDiagnoseIncidentInternalServerError {

	return &ListDiagnoseIncidentInternalServerError{}
}

// WithPayload adds the payload to the list diagnose incident internal server error response
func (o *ListDiagnoseIncidentInternalServerError) WithPayload(payload *models.Error) *ListDiagnoseIncidentInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list diagnose incident internal server error response
func (o *ListDiagnoseIncidentInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListDiagnoseIncidentInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
