// Code generated by go-swagger; DO NOT EDIT.

package notification_listeners_client_side

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"fmilheir/test_swagger/models"
)

// ListenToDiagnoseIncidentCreateEventCreatedCode is the HTTP code returned for type ListenToDiagnoseIncidentCreateEventCreated
const ListenToDiagnoseIncidentCreateEventCreatedCode int = 201

/*
ListenToDiagnoseIncidentCreateEventCreated Notified

swagger:response listenToDiagnoseIncidentCreateEventCreated
*/
type ListenToDiagnoseIncidentCreateEventCreated struct {

	/*
	  In: Body
	*/
	Payload *models.EventSubscription `json:"body,omitempty"`
}

// NewListenToDiagnoseIncidentCreateEventCreated creates ListenToDiagnoseIncidentCreateEventCreated with default headers values
func NewListenToDiagnoseIncidentCreateEventCreated() *ListenToDiagnoseIncidentCreateEventCreated {

	return &ListenToDiagnoseIncidentCreateEventCreated{}
}

// WithPayload adds the payload to the listen to diagnose incident create event created response
func (o *ListenToDiagnoseIncidentCreateEventCreated) WithPayload(payload *models.EventSubscription) *ListenToDiagnoseIncidentCreateEventCreated {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the listen to diagnose incident create event created response
func (o *ListenToDiagnoseIncidentCreateEventCreated) SetPayload(payload *models.EventSubscription) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListenToDiagnoseIncidentCreateEventCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(201)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ListenToDiagnoseIncidentCreateEventBadRequestCode is the HTTP code returned for type ListenToDiagnoseIncidentCreateEventBadRequest
const ListenToDiagnoseIncidentCreateEventBadRequestCode int = 400

/*
ListenToDiagnoseIncidentCreateEventBadRequest Bad Request

swagger:response listenToDiagnoseIncidentCreateEventBadRequest
*/
type ListenToDiagnoseIncidentCreateEventBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewListenToDiagnoseIncidentCreateEventBadRequest creates ListenToDiagnoseIncidentCreateEventBadRequest with default headers values
func NewListenToDiagnoseIncidentCreateEventBadRequest() *ListenToDiagnoseIncidentCreateEventBadRequest {

	return &ListenToDiagnoseIncidentCreateEventBadRequest{}
}

// WithPayload adds the payload to the listen to diagnose incident create event bad request response
func (o *ListenToDiagnoseIncidentCreateEventBadRequest) WithPayload(payload *models.Error) *ListenToDiagnoseIncidentCreateEventBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the listen to diagnose incident create event bad request response
func (o *ListenToDiagnoseIncidentCreateEventBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListenToDiagnoseIncidentCreateEventBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ListenToDiagnoseIncidentCreateEventUnauthorizedCode is the HTTP code returned for type ListenToDiagnoseIncidentCreateEventUnauthorized
const ListenToDiagnoseIncidentCreateEventUnauthorizedCode int = 401

/*
ListenToDiagnoseIncidentCreateEventUnauthorized Unauthorized

swagger:response listenToDiagnoseIncidentCreateEventUnauthorized
*/
type ListenToDiagnoseIncidentCreateEventUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewListenToDiagnoseIncidentCreateEventUnauthorized creates ListenToDiagnoseIncidentCreateEventUnauthorized with default headers values
func NewListenToDiagnoseIncidentCreateEventUnauthorized() *ListenToDiagnoseIncidentCreateEventUnauthorized {

	return &ListenToDiagnoseIncidentCreateEventUnauthorized{}
}

// WithPayload adds the payload to the listen to diagnose incident create event unauthorized response
func (o *ListenToDiagnoseIncidentCreateEventUnauthorized) WithPayload(payload *models.Error) *ListenToDiagnoseIncidentCreateEventUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the listen to diagnose incident create event unauthorized response
func (o *ListenToDiagnoseIncidentCreateEventUnauthorized) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListenToDiagnoseIncidentCreateEventUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ListenToDiagnoseIncidentCreateEventForbiddenCode is the HTTP code returned for type ListenToDiagnoseIncidentCreateEventForbidden
const ListenToDiagnoseIncidentCreateEventForbiddenCode int = 403

/*
ListenToDiagnoseIncidentCreateEventForbidden Forbidden

swagger:response listenToDiagnoseIncidentCreateEventForbidden
*/
type ListenToDiagnoseIncidentCreateEventForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewListenToDiagnoseIncidentCreateEventForbidden creates ListenToDiagnoseIncidentCreateEventForbidden with default headers values
func NewListenToDiagnoseIncidentCreateEventForbidden() *ListenToDiagnoseIncidentCreateEventForbidden {

	return &ListenToDiagnoseIncidentCreateEventForbidden{}
}

// WithPayload adds the payload to the listen to diagnose incident create event forbidden response
func (o *ListenToDiagnoseIncidentCreateEventForbidden) WithPayload(payload *models.Error) *ListenToDiagnoseIncidentCreateEventForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the listen to diagnose incident create event forbidden response
func (o *ListenToDiagnoseIncidentCreateEventForbidden) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListenToDiagnoseIncidentCreateEventForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ListenToDiagnoseIncidentCreateEventNotFoundCode is the HTTP code returned for type ListenToDiagnoseIncidentCreateEventNotFound
const ListenToDiagnoseIncidentCreateEventNotFoundCode int = 404

/*
ListenToDiagnoseIncidentCreateEventNotFound Not Found

swagger:response listenToDiagnoseIncidentCreateEventNotFound
*/
type ListenToDiagnoseIncidentCreateEventNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewListenToDiagnoseIncidentCreateEventNotFound creates ListenToDiagnoseIncidentCreateEventNotFound with default headers values
func NewListenToDiagnoseIncidentCreateEventNotFound() *ListenToDiagnoseIncidentCreateEventNotFound {

	return &ListenToDiagnoseIncidentCreateEventNotFound{}
}

// WithPayload adds the payload to the listen to diagnose incident create event not found response
func (o *ListenToDiagnoseIncidentCreateEventNotFound) WithPayload(payload *models.Error) *ListenToDiagnoseIncidentCreateEventNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the listen to diagnose incident create event not found response
func (o *ListenToDiagnoseIncidentCreateEventNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListenToDiagnoseIncidentCreateEventNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ListenToDiagnoseIncidentCreateEventMethodNotAllowedCode is the HTTP code returned for type ListenToDiagnoseIncidentCreateEventMethodNotAllowed
const ListenToDiagnoseIncidentCreateEventMethodNotAllowedCode int = 405

/*
ListenToDiagnoseIncidentCreateEventMethodNotAllowed Method Not allowed

swagger:response listenToDiagnoseIncidentCreateEventMethodNotAllowed
*/
type ListenToDiagnoseIncidentCreateEventMethodNotAllowed struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewListenToDiagnoseIncidentCreateEventMethodNotAllowed creates ListenToDiagnoseIncidentCreateEventMethodNotAllowed with default headers values
func NewListenToDiagnoseIncidentCreateEventMethodNotAllowed() *ListenToDiagnoseIncidentCreateEventMethodNotAllowed {

	return &ListenToDiagnoseIncidentCreateEventMethodNotAllowed{}
}

// WithPayload adds the payload to the listen to diagnose incident create event method not allowed response
func (o *ListenToDiagnoseIncidentCreateEventMethodNotAllowed) WithPayload(payload *models.Error) *ListenToDiagnoseIncidentCreateEventMethodNotAllowed {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the listen to diagnose incident create event method not allowed response
func (o *ListenToDiagnoseIncidentCreateEventMethodNotAllowed) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListenToDiagnoseIncidentCreateEventMethodNotAllowed) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(405)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ListenToDiagnoseIncidentCreateEventConflictCode is the HTTP code returned for type ListenToDiagnoseIncidentCreateEventConflict
const ListenToDiagnoseIncidentCreateEventConflictCode int = 409

/*
ListenToDiagnoseIncidentCreateEventConflict Conflict

swagger:response listenToDiagnoseIncidentCreateEventConflict
*/
type ListenToDiagnoseIncidentCreateEventConflict struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewListenToDiagnoseIncidentCreateEventConflict creates ListenToDiagnoseIncidentCreateEventConflict with default headers values
func NewListenToDiagnoseIncidentCreateEventConflict() *ListenToDiagnoseIncidentCreateEventConflict {

	return &ListenToDiagnoseIncidentCreateEventConflict{}
}

// WithPayload adds the payload to the listen to diagnose incident create event conflict response
func (o *ListenToDiagnoseIncidentCreateEventConflict) WithPayload(payload *models.Error) *ListenToDiagnoseIncidentCreateEventConflict {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the listen to diagnose incident create event conflict response
func (o *ListenToDiagnoseIncidentCreateEventConflict) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListenToDiagnoseIncidentCreateEventConflict) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(409)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ListenToDiagnoseIncidentCreateEventInternalServerErrorCode is the HTTP code returned for type ListenToDiagnoseIncidentCreateEventInternalServerError
const ListenToDiagnoseIncidentCreateEventInternalServerErrorCode int = 500

/*
ListenToDiagnoseIncidentCreateEventInternalServerError Internal Server Error

swagger:response listenToDiagnoseIncidentCreateEventInternalServerError
*/
type ListenToDiagnoseIncidentCreateEventInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewListenToDiagnoseIncidentCreateEventInternalServerError creates ListenToDiagnoseIncidentCreateEventInternalServerError with default headers values
func NewListenToDiagnoseIncidentCreateEventInternalServerError() *ListenToDiagnoseIncidentCreateEventInternalServerError {

	return &ListenToDiagnoseIncidentCreateEventInternalServerError{}
}

// WithPayload adds the payload to the listen to diagnose incident create event internal server error response
func (o *ListenToDiagnoseIncidentCreateEventInternalServerError) WithPayload(payload *models.Error) *ListenToDiagnoseIncidentCreateEventInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the listen to diagnose incident create event internal server error response
func (o *ListenToDiagnoseIncidentCreateEventInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListenToDiagnoseIncidentCreateEventInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
