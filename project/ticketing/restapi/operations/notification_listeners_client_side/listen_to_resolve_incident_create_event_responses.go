// Code generated by go-swagger; DO NOT EDIT.

package notification_listeners_client_side

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"fmilheir/test_swagger/models"
)

// ListenToResolveIncidentCreateEventCreatedCode is the HTTP code returned for type ListenToResolveIncidentCreateEventCreated
const ListenToResolveIncidentCreateEventCreatedCode int = 201

/*
ListenToResolveIncidentCreateEventCreated Notified

swagger:response listenToResolveIncidentCreateEventCreated
*/
type ListenToResolveIncidentCreateEventCreated struct {

	/*
	  In: Body
	*/
	Payload *models.EventSubscription `json:"body,omitempty"`
}

// NewListenToResolveIncidentCreateEventCreated creates ListenToResolveIncidentCreateEventCreated with default headers values
func NewListenToResolveIncidentCreateEventCreated() *ListenToResolveIncidentCreateEventCreated {

	return &ListenToResolveIncidentCreateEventCreated{}
}

// WithPayload adds the payload to the listen to resolve incident create event created response
func (o *ListenToResolveIncidentCreateEventCreated) WithPayload(payload *models.EventSubscription) *ListenToResolveIncidentCreateEventCreated {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the listen to resolve incident create event created response
func (o *ListenToResolveIncidentCreateEventCreated) SetPayload(payload *models.EventSubscription) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListenToResolveIncidentCreateEventCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(201)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ListenToResolveIncidentCreateEventBadRequestCode is the HTTP code returned for type ListenToResolveIncidentCreateEventBadRequest
const ListenToResolveIncidentCreateEventBadRequestCode int = 400

/*
ListenToResolveIncidentCreateEventBadRequest Bad Request

swagger:response listenToResolveIncidentCreateEventBadRequest
*/
type ListenToResolveIncidentCreateEventBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewListenToResolveIncidentCreateEventBadRequest creates ListenToResolveIncidentCreateEventBadRequest with default headers values
func NewListenToResolveIncidentCreateEventBadRequest() *ListenToResolveIncidentCreateEventBadRequest {

	return &ListenToResolveIncidentCreateEventBadRequest{}
}

// WithPayload adds the payload to the listen to resolve incident create event bad request response
func (o *ListenToResolveIncidentCreateEventBadRequest) WithPayload(payload *models.Error) *ListenToResolveIncidentCreateEventBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the listen to resolve incident create event bad request response
func (o *ListenToResolveIncidentCreateEventBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListenToResolveIncidentCreateEventBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ListenToResolveIncidentCreateEventUnauthorizedCode is the HTTP code returned for type ListenToResolveIncidentCreateEventUnauthorized
const ListenToResolveIncidentCreateEventUnauthorizedCode int = 401

/*
ListenToResolveIncidentCreateEventUnauthorized Unauthorized

swagger:response listenToResolveIncidentCreateEventUnauthorized
*/
type ListenToResolveIncidentCreateEventUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewListenToResolveIncidentCreateEventUnauthorized creates ListenToResolveIncidentCreateEventUnauthorized with default headers values
func NewListenToResolveIncidentCreateEventUnauthorized() *ListenToResolveIncidentCreateEventUnauthorized {

	return &ListenToResolveIncidentCreateEventUnauthorized{}
}

// WithPayload adds the payload to the listen to resolve incident create event unauthorized response
func (o *ListenToResolveIncidentCreateEventUnauthorized) WithPayload(payload *models.Error) *ListenToResolveIncidentCreateEventUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the listen to resolve incident create event unauthorized response
func (o *ListenToResolveIncidentCreateEventUnauthorized) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListenToResolveIncidentCreateEventUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ListenToResolveIncidentCreateEventForbiddenCode is the HTTP code returned for type ListenToResolveIncidentCreateEventForbidden
const ListenToResolveIncidentCreateEventForbiddenCode int = 403

/*
ListenToResolveIncidentCreateEventForbidden Forbidden

swagger:response listenToResolveIncidentCreateEventForbidden
*/
type ListenToResolveIncidentCreateEventForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewListenToResolveIncidentCreateEventForbidden creates ListenToResolveIncidentCreateEventForbidden with default headers values
func NewListenToResolveIncidentCreateEventForbidden() *ListenToResolveIncidentCreateEventForbidden {

	return &ListenToResolveIncidentCreateEventForbidden{}
}

// WithPayload adds the payload to the listen to resolve incident create event forbidden response
func (o *ListenToResolveIncidentCreateEventForbidden) WithPayload(payload *models.Error) *ListenToResolveIncidentCreateEventForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the listen to resolve incident create event forbidden response
func (o *ListenToResolveIncidentCreateEventForbidden) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListenToResolveIncidentCreateEventForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ListenToResolveIncidentCreateEventNotFoundCode is the HTTP code returned for type ListenToResolveIncidentCreateEventNotFound
const ListenToResolveIncidentCreateEventNotFoundCode int = 404

/*
ListenToResolveIncidentCreateEventNotFound Not Found

swagger:response listenToResolveIncidentCreateEventNotFound
*/
type ListenToResolveIncidentCreateEventNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewListenToResolveIncidentCreateEventNotFound creates ListenToResolveIncidentCreateEventNotFound with default headers values
func NewListenToResolveIncidentCreateEventNotFound() *ListenToResolveIncidentCreateEventNotFound {

	return &ListenToResolveIncidentCreateEventNotFound{}
}

// WithPayload adds the payload to the listen to resolve incident create event not found response
func (o *ListenToResolveIncidentCreateEventNotFound) WithPayload(payload *models.Error) *ListenToResolveIncidentCreateEventNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the listen to resolve incident create event not found response
func (o *ListenToResolveIncidentCreateEventNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListenToResolveIncidentCreateEventNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ListenToResolveIncidentCreateEventMethodNotAllowedCode is the HTTP code returned for type ListenToResolveIncidentCreateEventMethodNotAllowed
const ListenToResolveIncidentCreateEventMethodNotAllowedCode int = 405

/*
ListenToResolveIncidentCreateEventMethodNotAllowed Method Not allowed

swagger:response listenToResolveIncidentCreateEventMethodNotAllowed
*/
type ListenToResolveIncidentCreateEventMethodNotAllowed struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewListenToResolveIncidentCreateEventMethodNotAllowed creates ListenToResolveIncidentCreateEventMethodNotAllowed with default headers values
func NewListenToResolveIncidentCreateEventMethodNotAllowed() *ListenToResolveIncidentCreateEventMethodNotAllowed {

	return &ListenToResolveIncidentCreateEventMethodNotAllowed{}
}

// WithPayload adds the payload to the listen to resolve incident create event method not allowed response
func (o *ListenToResolveIncidentCreateEventMethodNotAllowed) WithPayload(payload *models.Error) *ListenToResolveIncidentCreateEventMethodNotAllowed {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the listen to resolve incident create event method not allowed response
func (o *ListenToResolveIncidentCreateEventMethodNotAllowed) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListenToResolveIncidentCreateEventMethodNotAllowed) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(405)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ListenToResolveIncidentCreateEventConflictCode is the HTTP code returned for type ListenToResolveIncidentCreateEventConflict
const ListenToResolveIncidentCreateEventConflictCode int = 409

/*
ListenToResolveIncidentCreateEventConflict Conflict

swagger:response listenToResolveIncidentCreateEventConflict
*/
type ListenToResolveIncidentCreateEventConflict struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewListenToResolveIncidentCreateEventConflict creates ListenToResolveIncidentCreateEventConflict with default headers values
func NewListenToResolveIncidentCreateEventConflict() *ListenToResolveIncidentCreateEventConflict {

	return &ListenToResolveIncidentCreateEventConflict{}
}

// WithPayload adds the payload to the listen to resolve incident create event conflict response
func (o *ListenToResolveIncidentCreateEventConflict) WithPayload(payload *models.Error) *ListenToResolveIncidentCreateEventConflict {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the listen to resolve incident create event conflict response
func (o *ListenToResolveIncidentCreateEventConflict) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListenToResolveIncidentCreateEventConflict) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(409)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ListenToResolveIncidentCreateEventInternalServerErrorCode is the HTTP code returned for type ListenToResolveIncidentCreateEventInternalServerError
const ListenToResolveIncidentCreateEventInternalServerErrorCode int = 500

/*
ListenToResolveIncidentCreateEventInternalServerError Internal Server Error

swagger:response listenToResolveIncidentCreateEventInternalServerError
*/
type ListenToResolveIncidentCreateEventInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewListenToResolveIncidentCreateEventInternalServerError creates ListenToResolveIncidentCreateEventInternalServerError with default headers values
func NewListenToResolveIncidentCreateEventInternalServerError() *ListenToResolveIncidentCreateEventInternalServerError {

	return &ListenToResolveIncidentCreateEventInternalServerError{}
}

// WithPayload adds the payload to the listen to resolve incident create event internal server error response
func (o *ListenToResolveIncidentCreateEventInternalServerError) WithPayload(payload *models.Error) *ListenToResolveIncidentCreateEventInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the listen to resolve incident create event internal server error response
func (o *ListenToResolveIncidentCreateEventInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListenToResolveIncidentCreateEventInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
