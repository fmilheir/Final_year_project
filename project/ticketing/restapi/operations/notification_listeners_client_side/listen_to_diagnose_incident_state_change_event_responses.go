// Code generated by go-swagger; DO NOT EDIT.

package notification_listeners_client_side

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"fmilheir/test_swagger/models"
)

// ListenToDiagnoseIncidentStateChangeEventCreatedCode is the HTTP code returned for type ListenToDiagnoseIncidentStateChangeEventCreated
const ListenToDiagnoseIncidentStateChangeEventCreatedCode int = 201

/*
ListenToDiagnoseIncidentStateChangeEventCreated Notified

swagger:response listenToDiagnoseIncidentStateChangeEventCreated
*/
type ListenToDiagnoseIncidentStateChangeEventCreated struct {

	/*
	  In: Body
	*/
	Payload *models.EventSubscription `json:"body,omitempty"`
}

// NewListenToDiagnoseIncidentStateChangeEventCreated creates ListenToDiagnoseIncidentStateChangeEventCreated with default headers values
func NewListenToDiagnoseIncidentStateChangeEventCreated() *ListenToDiagnoseIncidentStateChangeEventCreated {

	return &ListenToDiagnoseIncidentStateChangeEventCreated{}
}

// WithPayload adds the payload to the listen to diagnose incident state change event created response
func (o *ListenToDiagnoseIncidentStateChangeEventCreated) WithPayload(payload *models.EventSubscription) *ListenToDiagnoseIncidentStateChangeEventCreated {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the listen to diagnose incident state change event created response
func (o *ListenToDiagnoseIncidentStateChangeEventCreated) SetPayload(payload *models.EventSubscription) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListenToDiagnoseIncidentStateChangeEventCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(201)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ListenToDiagnoseIncidentStateChangeEventBadRequestCode is the HTTP code returned for type ListenToDiagnoseIncidentStateChangeEventBadRequest
const ListenToDiagnoseIncidentStateChangeEventBadRequestCode int = 400

/*
ListenToDiagnoseIncidentStateChangeEventBadRequest Bad Request

swagger:response listenToDiagnoseIncidentStateChangeEventBadRequest
*/
type ListenToDiagnoseIncidentStateChangeEventBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewListenToDiagnoseIncidentStateChangeEventBadRequest creates ListenToDiagnoseIncidentStateChangeEventBadRequest with default headers values
func NewListenToDiagnoseIncidentStateChangeEventBadRequest() *ListenToDiagnoseIncidentStateChangeEventBadRequest {

	return &ListenToDiagnoseIncidentStateChangeEventBadRequest{}
}

// WithPayload adds the payload to the listen to diagnose incident state change event bad request response
func (o *ListenToDiagnoseIncidentStateChangeEventBadRequest) WithPayload(payload *models.Error) *ListenToDiagnoseIncidentStateChangeEventBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the listen to diagnose incident state change event bad request response
func (o *ListenToDiagnoseIncidentStateChangeEventBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListenToDiagnoseIncidentStateChangeEventBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ListenToDiagnoseIncidentStateChangeEventUnauthorizedCode is the HTTP code returned for type ListenToDiagnoseIncidentStateChangeEventUnauthorized
const ListenToDiagnoseIncidentStateChangeEventUnauthorizedCode int = 401

/*
ListenToDiagnoseIncidentStateChangeEventUnauthorized Unauthorized

swagger:response listenToDiagnoseIncidentStateChangeEventUnauthorized
*/
type ListenToDiagnoseIncidentStateChangeEventUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewListenToDiagnoseIncidentStateChangeEventUnauthorized creates ListenToDiagnoseIncidentStateChangeEventUnauthorized with default headers values
func NewListenToDiagnoseIncidentStateChangeEventUnauthorized() *ListenToDiagnoseIncidentStateChangeEventUnauthorized {

	return &ListenToDiagnoseIncidentStateChangeEventUnauthorized{}
}

// WithPayload adds the payload to the listen to diagnose incident state change event unauthorized response
func (o *ListenToDiagnoseIncidentStateChangeEventUnauthorized) WithPayload(payload *models.Error) *ListenToDiagnoseIncidentStateChangeEventUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the listen to diagnose incident state change event unauthorized response
func (o *ListenToDiagnoseIncidentStateChangeEventUnauthorized) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListenToDiagnoseIncidentStateChangeEventUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ListenToDiagnoseIncidentStateChangeEventForbiddenCode is the HTTP code returned for type ListenToDiagnoseIncidentStateChangeEventForbidden
const ListenToDiagnoseIncidentStateChangeEventForbiddenCode int = 403

/*
ListenToDiagnoseIncidentStateChangeEventForbidden Forbidden

swagger:response listenToDiagnoseIncidentStateChangeEventForbidden
*/
type ListenToDiagnoseIncidentStateChangeEventForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewListenToDiagnoseIncidentStateChangeEventForbidden creates ListenToDiagnoseIncidentStateChangeEventForbidden with default headers values
func NewListenToDiagnoseIncidentStateChangeEventForbidden() *ListenToDiagnoseIncidentStateChangeEventForbidden {

	return &ListenToDiagnoseIncidentStateChangeEventForbidden{}
}

// WithPayload adds the payload to the listen to diagnose incident state change event forbidden response
func (o *ListenToDiagnoseIncidentStateChangeEventForbidden) WithPayload(payload *models.Error) *ListenToDiagnoseIncidentStateChangeEventForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the listen to diagnose incident state change event forbidden response
func (o *ListenToDiagnoseIncidentStateChangeEventForbidden) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListenToDiagnoseIncidentStateChangeEventForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ListenToDiagnoseIncidentStateChangeEventNotFoundCode is the HTTP code returned for type ListenToDiagnoseIncidentStateChangeEventNotFound
const ListenToDiagnoseIncidentStateChangeEventNotFoundCode int = 404

/*
ListenToDiagnoseIncidentStateChangeEventNotFound Not Found

swagger:response listenToDiagnoseIncidentStateChangeEventNotFound
*/
type ListenToDiagnoseIncidentStateChangeEventNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewListenToDiagnoseIncidentStateChangeEventNotFound creates ListenToDiagnoseIncidentStateChangeEventNotFound with default headers values
func NewListenToDiagnoseIncidentStateChangeEventNotFound() *ListenToDiagnoseIncidentStateChangeEventNotFound {

	return &ListenToDiagnoseIncidentStateChangeEventNotFound{}
}

// WithPayload adds the payload to the listen to diagnose incident state change event not found response
func (o *ListenToDiagnoseIncidentStateChangeEventNotFound) WithPayload(payload *models.Error) *ListenToDiagnoseIncidentStateChangeEventNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the listen to diagnose incident state change event not found response
func (o *ListenToDiagnoseIncidentStateChangeEventNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListenToDiagnoseIncidentStateChangeEventNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ListenToDiagnoseIncidentStateChangeEventMethodNotAllowedCode is the HTTP code returned for type ListenToDiagnoseIncidentStateChangeEventMethodNotAllowed
const ListenToDiagnoseIncidentStateChangeEventMethodNotAllowedCode int = 405

/*
ListenToDiagnoseIncidentStateChangeEventMethodNotAllowed Method Not allowed

swagger:response listenToDiagnoseIncidentStateChangeEventMethodNotAllowed
*/
type ListenToDiagnoseIncidentStateChangeEventMethodNotAllowed struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewListenToDiagnoseIncidentStateChangeEventMethodNotAllowed creates ListenToDiagnoseIncidentStateChangeEventMethodNotAllowed with default headers values
func NewListenToDiagnoseIncidentStateChangeEventMethodNotAllowed() *ListenToDiagnoseIncidentStateChangeEventMethodNotAllowed {

	return &ListenToDiagnoseIncidentStateChangeEventMethodNotAllowed{}
}

// WithPayload adds the payload to the listen to diagnose incident state change event method not allowed response
func (o *ListenToDiagnoseIncidentStateChangeEventMethodNotAllowed) WithPayload(payload *models.Error) *ListenToDiagnoseIncidentStateChangeEventMethodNotAllowed {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the listen to diagnose incident state change event method not allowed response
func (o *ListenToDiagnoseIncidentStateChangeEventMethodNotAllowed) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListenToDiagnoseIncidentStateChangeEventMethodNotAllowed) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(405)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ListenToDiagnoseIncidentStateChangeEventConflictCode is the HTTP code returned for type ListenToDiagnoseIncidentStateChangeEventConflict
const ListenToDiagnoseIncidentStateChangeEventConflictCode int = 409

/*
ListenToDiagnoseIncidentStateChangeEventConflict Conflict

swagger:response listenToDiagnoseIncidentStateChangeEventConflict
*/
type ListenToDiagnoseIncidentStateChangeEventConflict struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewListenToDiagnoseIncidentStateChangeEventConflict creates ListenToDiagnoseIncidentStateChangeEventConflict with default headers values
func NewListenToDiagnoseIncidentStateChangeEventConflict() *ListenToDiagnoseIncidentStateChangeEventConflict {

	return &ListenToDiagnoseIncidentStateChangeEventConflict{}
}

// WithPayload adds the payload to the listen to diagnose incident state change event conflict response
func (o *ListenToDiagnoseIncidentStateChangeEventConflict) WithPayload(payload *models.Error) *ListenToDiagnoseIncidentStateChangeEventConflict {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the listen to diagnose incident state change event conflict response
func (o *ListenToDiagnoseIncidentStateChangeEventConflict) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListenToDiagnoseIncidentStateChangeEventConflict) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(409)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ListenToDiagnoseIncidentStateChangeEventInternalServerErrorCode is the HTTP code returned for type ListenToDiagnoseIncidentStateChangeEventInternalServerError
const ListenToDiagnoseIncidentStateChangeEventInternalServerErrorCode int = 500

/*
ListenToDiagnoseIncidentStateChangeEventInternalServerError Internal Server Error

swagger:response listenToDiagnoseIncidentStateChangeEventInternalServerError
*/
type ListenToDiagnoseIncidentStateChangeEventInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewListenToDiagnoseIncidentStateChangeEventInternalServerError creates ListenToDiagnoseIncidentStateChangeEventInternalServerError with default headers values
func NewListenToDiagnoseIncidentStateChangeEventInternalServerError() *ListenToDiagnoseIncidentStateChangeEventInternalServerError {

	return &ListenToDiagnoseIncidentStateChangeEventInternalServerError{}
}

// WithPayload adds the payload to the listen to diagnose incident state change event internal server error response
func (o *ListenToDiagnoseIncidentStateChangeEventInternalServerError) WithPayload(payload *models.Error) *ListenToDiagnoseIncidentStateChangeEventInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the listen to diagnose incident state change event internal server error response
func (o *ListenToDiagnoseIncidentStateChangeEventInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListenToDiagnoseIncidentStateChangeEventInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
