// Code generated by go-swagger; DO NOT EDIT.

package diagnose_incident

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// ListDiagnoseIncidentHandlerFunc turns a function with the right signature into a list diagnose incident handler
type ListDiagnoseIncidentHandlerFunc func(ListDiagnoseIncidentParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ListDiagnoseIncidentHandlerFunc) Handle(params ListDiagnoseIncidentParams) middleware.Responder {
	return fn(params)
}

// ListDiagnoseIncidentHandler interface for that can handle valid list diagnose incident params
type ListDiagnoseIncidentHandler interface {
	Handle(ListDiagnoseIncidentParams) middleware.Responder
}

// NewListDiagnoseIncident creates a new http.Handler for the list diagnose incident operation
func NewListDiagnoseIncident(ctx *middleware.Context, handler ListDiagnoseIncidentHandler) *ListDiagnoseIncident {
	return &ListDiagnoseIncident{Context: ctx, Handler: handler}
}

/*
	ListDiagnoseIncident swagger:route GET /diagnoseIncident diagnoseIncident listDiagnoseIncident

# List or find DiagnoseIncident objects

This operation list or find DiagnoseIncident entities
*/
type ListDiagnoseIncident struct {
	Context *middleware.Context
	Handler ListDiagnoseIncidentHandler
}

func (o *ListDiagnoseIncident) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewListDiagnoseIncidentParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
