// Code generated by go-swagger; DO NOT EDIT.

package notification_listeners_client_side

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// ListenToDiagnoseIncidentCreateEventHandlerFunc turns a function with the right signature into a listen to diagnose incident create event handler
type ListenToDiagnoseIncidentCreateEventHandlerFunc func(ListenToDiagnoseIncidentCreateEventParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ListenToDiagnoseIncidentCreateEventHandlerFunc) Handle(params ListenToDiagnoseIncidentCreateEventParams) middleware.Responder {
	return fn(params)
}

// ListenToDiagnoseIncidentCreateEventHandler interface for that can handle valid listen to diagnose incident create event params
type ListenToDiagnoseIncidentCreateEventHandler interface {
	Handle(ListenToDiagnoseIncidentCreateEventParams) middleware.Responder
}

// NewListenToDiagnoseIncidentCreateEvent creates a new http.Handler for the listen to diagnose incident create event operation
func NewListenToDiagnoseIncidentCreateEvent(ctx *middleware.Context, handler ListenToDiagnoseIncidentCreateEventHandler) *ListenToDiagnoseIncidentCreateEvent {
	return &ListenToDiagnoseIncidentCreateEvent{Context: ctx, Handler: handler}
}

/*
	ListenToDiagnoseIncidentCreateEvent swagger:route POST /listener/diagnoseIncidentCreateEvent notification listeners (client side) listenToDiagnoseIncidentCreateEvent

# Client listener for entity DiagnoseIncidentCreateEvent

Example of a client listener for receiving the notification DiagnoseIncidentCreateEvent
*/
type ListenToDiagnoseIncidentCreateEvent struct {
	Context *middleware.Context
	Handler ListenToDiagnoseIncidentCreateEventHandler
}

func (o *ListenToDiagnoseIncidentCreateEvent) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewListenToDiagnoseIncidentCreateEventParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
