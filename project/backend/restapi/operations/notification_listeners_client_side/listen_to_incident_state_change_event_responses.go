// Code generated by go-swagger; DO NOT EDIT.

package notification_listeners_client_side

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/fmilheir/final_year_project/backend/models"
)

// ListenToIncidentStateChangeEventCreatedCode is the HTTP code returned for type ListenToIncidentStateChangeEventCreated
const ListenToIncidentStateChangeEventCreatedCode int = 201

/*
ListenToIncidentStateChangeEventCreated Notified

swagger:response listenToIncidentStateChangeEventCreated
*/
type ListenToIncidentStateChangeEventCreated struct {

	/*
	  In: Body
	*/
	Payload *models.EventSubscription `json:"body,omitempty"`
}

// NewListenToIncidentStateChangeEventCreated creates ListenToIncidentStateChangeEventCreated with default headers values
func NewListenToIncidentStateChangeEventCreated() *ListenToIncidentStateChangeEventCreated {

	return &ListenToIncidentStateChangeEventCreated{}
}

// WithPayload adds the payload to the listen to incident state change event created response
func (o *ListenToIncidentStateChangeEventCreated) WithPayload(payload *models.EventSubscription) *ListenToIncidentStateChangeEventCreated {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the listen to incident state change event created response
func (o *ListenToIncidentStateChangeEventCreated) SetPayload(payload *models.EventSubscription) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListenToIncidentStateChangeEventCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(201)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ListenToIncidentStateChangeEventBadRequestCode is the HTTP code returned for type ListenToIncidentStateChangeEventBadRequest
const ListenToIncidentStateChangeEventBadRequestCode int = 400

/*
ListenToIncidentStateChangeEventBadRequest Bad Request

swagger:response listenToIncidentStateChangeEventBadRequest
*/
type ListenToIncidentStateChangeEventBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewListenToIncidentStateChangeEventBadRequest creates ListenToIncidentStateChangeEventBadRequest with default headers values
func NewListenToIncidentStateChangeEventBadRequest() *ListenToIncidentStateChangeEventBadRequest {

	return &ListenToIncidentStateChangeEventBadRequest{}
}

// WithPayload adds the payload to the listen to incident state change event bad request response
func (o *ListenToIncidentStateChangeEventBadRequest) WithPayload(payload *models.Error) *ListenToIncidentStateChangeEventBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the listen to incident state change event bad request response
func (o *ListenToIncidentStateChangeEventBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListenToIncidentStateChangeEventBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ListenToIncidentStateChangeEventUnauthorizedCode is the HTTP code returned for type ListenToIncidentStateChangeEventUnauthorized
const ListenToIncidentStateChangeEventUnauthorizedCode int = 401

/*
ListenToIncidentStateChangeEventUnauthorized Unauthorized

swagger:response listenToIncidentStateChangeEventUnauthorized
*/
type ListenToIncidentStateChangeEventUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewListenToIncidentStateChangeEventUnauthorized creates ListenToIncidentStateChangeEventUnauthorized with default headers values
func NewListenToIncidentStateChangeEventUnauthorized() *ListenToIncidentStateChangeEventUnauthorized {

	return &ListenToIncidentStateChangeEventUnauthorized{}
}

// WithPayload adds the payload to the listen to incident state change event unauthorized response
func (o *ListenToIncidentStateChangeEventUnauthorized) WithPayload(payload *models.Error) *ListenToIncidentStateChangeEventUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the listen to incident state change event unauthorized response
func (o *ListenToIncidentStateChangeEventUnauthorized) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListenToIncidentStateChangeEventUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ListenToIncidentStateChangeEventForbiddenCode is the HTTP code returned for type ListenToIncidentStateChangeEventForbidden
const ListenToIncidentStateChangeEventForbiddenCode int = 403

/*
ListenToIncidentStateChangeEventForbidden Forbidden

swagger:response listenToIncidentStateChangeEventForbidden
*/
type ListenToIncidentStateChangeEventForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewListenToIncidentStateChangeEventForbidden creates ListenToIncidentStateChangeEventForbidden with default headers values
func NewListenToIncidentStateChangeEventForbidden() *ListenToIncidentStateChangeEventForbidden {

	return &ListenToIncidentStateChangeEventForbidden{}
}

// WithPayload adds the payload to the listen to incident state change event forbidden response
func (o *ListenToIncidentStateChangeEventForbidden) WithPayload(payload *models.Error) *ListenToIncidentStateChangeEventForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the listen to incident state change event forbidden response
func (o *ListenToIncidentStateChangeEventForbidden) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListenToIncidentStateChangeEventForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ListenToIncidentStateChangeEventNotFoundCode is the HTTP code returned for type ListenToIncidentStateChangeEventNotFound
const ListenToIncidentStateChangeEventNotFoundCode int = 404

/*
ListenToIncidentStateChangeEventNotFound Not Found

swagger:response listenToIncidentStateChangeEventNotFound
*/
type ListenToIncidentStateChangeEventNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewListenToIncidentStateChangeEventNotFound creates ListenToIncidentStateChangeEventNotFound with default headers values
func NewListenToIncidentStateChangeEventNotFound() *ListenToIncidentStateChangeEventNotFound {

	return &ListenToIncidentStateChangeEventNotFound{}
}

// WithPayload adds the payload to the listen to incident state change event not found response
func (o *ListenToIncidentStateChangeEventNotFound) WithPayload(payload *models.Error) *ListenToIncidentStateChangeEventNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the listen to incident state change event not found response
func (o *ListenToIncidentStateChangeEventNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListenToIncidentStateChangeEventNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ListenToIncidentStateChangeEventMethodNotAllowedCode is the HTTP code returned for type ListenToIncidentStateChangeEventMethodNotAllowed
const ListenToIncidentStateChangeEventMethodNotAllowedCode int = 405

/*
ListenToIncidentStateChangeEventMethodNotAllowed Method Not allowed

swagger:response listenToIncidentStateChangeEventMethodNotAllowed
*/
type ListenToIncidentStateChangeEventMethodNotAllowed struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewListenToIncidentStateChangeEventMethodNotAllowed creates ListenToIncidentStateChangeEventMethodNotAllowed with default headers values
func NewListenToIncidentStateChangeEventMethodNotAllowed() *ListenToIncidentStateChangeEventMethodNotAllowed {

	return &ListenToIncidentStateChangeEventMethodNotAllowed{}
}

// WithPayload adds the payload to the listen to incident state change event method not allowed response
func (o *ListenToIncidentStateChangeEventMethodNotAllowed) WithPayload(payload *models.Error) *ListenToIncidentStateChangeEventMethodNotAllowed {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the listen to incident state change event method not allowed response
func (o *ListenToIncidentStateChangeEventMethodNotAllowed) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListenToIncidentStateChangeEventMethodNotAllowed) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(405)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ListenToIncidentStateChangeEventConflictCode is the HTTP code returned for type ListenToIncidentStateChangeEventConflict
const ListenToIncidentStateChangeEventConflictCode int = 409

/*
ListenToIncidentStateChangeEventConflict Conflict

swagger:response listenToIncidentStateChangeEventConflict
*/
type ListenToIncidentStateChangeEventConflict struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewListenToIncidentStateChangeEventConflict creates ListenToIncidentStateChangeEventConflict with default headers values
func NewListenToIncidentStateChangeEventConflict() *ListenToIncidentStateChangeEventConflict {

	return &ListenToIncidentStateChangeEventConflict{}
}

// WithPayload adds the payload to the listen to incident state change event conflict response
func (o *ListenToIncidentStateChangeEventConflict) WithPayload(payload *models.Error) *ListenToIncidentStateChangeEventConflict {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the listen to incident state change event conflict response
func (o *ListenToIncidentStateChangeEventConflict) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListenToIncidentStateChangeEventConflict) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(409)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ListenToIncidentStateChangeEventInternalServerErrorCode is the HTTP code returned for type ListenToIncidentStateChangeEventInternalServerError
const ListenToIncidentStateChangeEventInternalServerErrorCode int = 500

/*
ListenToIncidentStateChangeEventInternalServerError Internal Server Error

swagger:response listenToIncidentStateChangeEventInternalServerError
*/
type ListenToIncidentStateChangeEventInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewListenToIncidentStateChangeEventInternalServerError creates ListenToIncidentStateChangeEventInternalServerError with default headers values
func NewListenToIncidentStateChangeEventInternalServerError() *ListenToIncidentStateChangeEventInternalServerError {

	return &ListenToIncidentStateChangeEventInternalServerError{}
}

// WithPayload adds the payload to the listen to incident state change event internal server error response
func (o *ListenToIncidentStateChangeEventInternalServerError) WithPayload(payload *models.Error) *ListenToIncidentStateChangeEventInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the listen to incident state change event internal server error response
func (o *ListenToIncidentStateChangeEventInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListenToIncidentStateChangeEventInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
