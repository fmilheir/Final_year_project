// Code generated by go-swagger; DO NOT EDIT.

package notification_listeners_client_side

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/fmilheir/final_year_project/backend/models"
)

// ListenToIncidentCreateEventCreatedCode is the HTTP code returned for type ListenToIncidentCreateEventCreated
const ListenToIncidentCreateEventCreatedCode int = 201

/*
ListenToIncidentCreateEventCreated Notified

swagger:response listenToIncidentCreateEventCreated
*/
type ListenToIncidentCreateEventCreated struct {

	/*
	  In: Body
	*/
	Payload *models.EventSubscription `json:"body,omitempty"`
}

// NewListenToIncidentCreateEventCreated creates ListenToIncidentCreateEventCreated with default headers values
func NewListenToIncidentCreateEventCreated() *ListenToIncidentCreateEventCreated {

	return &ListenToIncidentCreateEventCreated{}
}

// WithPayload adds the payload to the listen to incident create event created response
func (o *ListenToIncidentCreateEventCreated) WithPayload(payload *models.EventSubscription) *ListenToIncidentCreateEventCreated {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the listen to incident create event created response
func (o *ListenToIncidentCreateEventCreated) SetPayload(payload *models.EventSubscription) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListenToIncidentCreateEventCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(201)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ListenToIncidentCreateEventBadRequestCode is the HTTP code returned for type ListenToIncidentCreateEventBadRequest
const ListenToIncidentCreateEventBadRequestCode int = 400

/*
ListenToIncidentCreateEventBadRequest Bad Request

swagger:response listenToIncidentCreateEventBadRequest
*/
type ListenToIncidentCreateEventBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewListenToIncidentCreateEventBadRequest creates ListenToIncidentCreateEventBadRequest with default headers values
func NewListenToIncidentCreateEventBadRequest() *ListenToIncidentCreateEventBadRequest {

	return &ListenToIncidentCreateEventBadRequest{}
}

// WithPayload adds the payload to the listen to incident create event bad request response
func (o *ListenToIncidentCreateEventBadRequest) WithPayload(payload *models.Error) *ListenToIncidentCreateEventBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the listen to incident create event bad request response
func (o *ListenToIncidentCreateEventBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListenToIncidentCreateEventBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ListenToIncidentCreateEventUnauthorizedCode is the HTTP code returned for type ListenToIncidentCreateEventUnauthorized
const ListenToIncidentCreateEventUnauthorizedCode int = 401

/*
ListenToIncidentCreateEventUnauthorized Unauthorized

swagger:response listenToIncidentCreateEventUnauthorized
*/
type ListenToIncidentCreateEventUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewListenToIncidentCreateEventUnauthorized creates ListenToIncidentCreateEventUnauthorized with default headers values
func NewListenToIncidentCreateEventUnauthorized() *ListenToIncidentCreateEventUnauthorized {

	return &ListenToIncidentCreateEventUnauthorized{}
}

// WithPayload adds the payload to the listen to incident create event unauthorized response
func (o *ListenToIncidentCreateEventUnauthorized) WithPayload(payload *models.Error) *ListenToIncidentCreateEventUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the listen to incident create event unauthorized response
func (o *ListenToIncidentCreateEventUnauthorized) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListenToIncidentCreateEventUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ListenToIncidentCreateEventForbiddenCode is the HTTP code returned for type ListenToIncidentCreateEventForbidden
const ListenToIncidentCreateEventForbiddenCode int = 403

/*
ListenToIncidentCreateEventForbidden Forbidden

swagger:response listenToIncidentCreateEventForbidden
*/
type ListenToIncidentCreateEventForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewListenToIncidentCreateEventForbidden creates ListenToIncidentCreateEventForbidden with default headers values
func NewListenToIncidentCreateEventForbidden() *ListenToIncidentCreateEventForbidden {

	return &ListenToIncidentCreateEventForbidden{}
}

// WithPayload adds the payload to the listen to incident create event forbidden response
func (o *ListenToIncidentCreateEventForbidden) WithPayload(payload *models.Error) *ListenToIncidentCreateEventForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the listen to incident create event forbidden response
func (o *ListenToIncidentCreateEventForbidden) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListenToIncidentCreateEventForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ListenToIncidentCreateEventNotFoundCode is the HTTP code returned for type ListenToIncidentCreateEventNotFound
const ListenToIncidentCreateEventNotFoundCode int = 404

/*
ListenToIncidentCreateEventNotFound Not Found

swagger:response listenToIncidentCreateEventNotFound
*/
type ListenToIncidentCreateEventNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewListenToIncidentCreateEventNotFound creates ListenToIncidentCreateEventNotFound with default headers values
func NewListenToIncidentCreateEventNotFound() *ListenToIncidentCreateEventNotFound {

	return &ListenToIncidentCreateEventNotFound{}
}

// WithPayload adds the payload to the listen to incident create event not found response
func (o *ListenToIncidentCreateEventNotFound) WithPayload(payload *models.Error) *ListenToIncidentCreateEventNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the listen to incident create event not found response
func (o *ListenToIncidentCreateEventNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListenToIncidentCreateEventNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ListenToIncidentCreateEventMethodNotAllowedCode is the HTTP code returned for type ListenToIncidentCreateEventMethodNotAllowed
const ListenToIncidentCreateEventMethodNotAllowedCode int = 405

/*
ListenToIncidentCreateEventMethodNotAllowed Method Not allowed

swagger:response listenToIncidentCreateEventMethodNotAllowed
*/
type ListenToIncidentCreateEventMethodNotAllowed struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewListenToIncidentCreateEventMethodNotAllowed creates ListenToIncidentCreateEventMethodNotAllowed with default headers values
func NewListenToIncidentCreateEventMethodNotAllowed() *ListenToIncidentCreateEventMethodNotAllowed {

	return &ListenToIncidentCreateEventMethodNotAllowed{}
}

// WithPayload adds the payload to the listen to incident create event method not allowed response
func (o *ListenToIncidentCreateEventMethodNotAllowed) WithPayload(payload *models.Error) *ListenToIncidentCreateEventMethodNotAllowed {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the listen to incident create event method not allowed response
func (o *ListenToIncidentCreateEventMethodNotAllowed) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListenToIncidentCreateEventMethodNotAllowed) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(405)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ListenToIncidentCreateEventConflictCode is the HTTP code returned for type ListenToIncidentCreateEventConflict
const ListenToIncidentCreateEventConflictCode int = 409

/*
ListenToIncidentCreateEventConflict Conflict

swagger:response listenToIncidentCreateEventConflict
*/
type ListenToIncidentCreateEventConflict struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewListenToIncidentCreateEventConflict creates ListenToIncidentCreateEventConflict with default headers values
func NewListenToIncidentCreateEventConflict() *ListenToIncidentCreateEventConflict {

	return &ListenToIncidentCreateEventConflict{}
}

// WithPayload adds the payload to the listen to incident create event conflict response
func (o *ListenToIncidentCreateEventConflict) WithPayload(payload *models.Error) *ListenToIncidentCreateEventConflict {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the listen to incident create event conflict response
func (o *ListenToIncidentCreateEventConflict) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListenToIncidentCreateEventConflict) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(409)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ListenToIncidentCreateEventInternalServerErrorCode is the HTTP code returned for type ListenToIncidentCreateEventInternalServerError
const ListenToIncidentCreateEventInternalServerErrorCode int = 500

/*
ListenToIncidentCreateEventInternalServerError Internal Server Error

swagger:response listenToIncidentCreateEventInternalServerError
*/
type ListenToIncidentCreateEventInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewListenToIncidentCreateEventInternalServerError creates ListenToIncidentCreateEventInternalServerError with default headers values
func NewListenToIncidentCreateEventInternalServerError() *ListenToIncidentCreateEventInternalServerError {

	return &ListenToIncidentCreateEventInternalServerError{}
}

// WithPayload adds the payload to the listen to incident create event internal server error response
func (o *ListenToIncidentCreateEventInternalServerError) WithPayload(payload *models.Error) *ListenToIncidentCreateEventInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the listen to incident create event internal server error response
func (o *ListenToIncidentCreateEventInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListenToIncidentCreateEventInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
