// Code generated by go-swagger; DO NOT EDIT.

package resolve_incident

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/fmilheir/final_year_project/backend/models"
)

// RetrieveResolveIncidentOKCode is the HTTP code returned for type RetrieveResolveIncidentOK
const RetrieveResolveIncidentOKCode int = 200

/*
RetrieveResolveIncidentOK Success

swagger:response retrieveResolveIncidentOK
*/
type RetrieveResolveIncidentOK struct {

	/*
	  In: Body
	*/
	Payload *models.ResolveIncident `json:"body,omitempty"`
}

// NewRetrieveResolveIncidentOK creates RetrieveResolveIncidentOK with default headers values
func NewRetrieveResolveIncidentOK() *RetrieveResolveIncidentOK {

	return &RetrieveResolveIncidentOK{}
}

// WithPayload adds the payload to the retrieve resolve incident o k response
func (o *RetrieveResolveIncidentOK) WithPayload(payload *models.ResolveIncident) *RetrieveResolveIncidentOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the retrieve resolve incident o k response
func (o *RetrieveResolveIncidentOK) SetPayload(payload *models.ResolveIncident) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RetrieveResolveIncidentOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// RetrieveResolveIncidentBadRequestCode is the HTTP code returned for type RetrieveResolveIncidentBadRequest
const RetrieveResolveIncidentBadRequestCode int = 400

/*
RetrieveResolveIncidentBadRequest Bad Request

swagger:response retrieveResolveIncidentBadRequest
*/
type RetrieveResolveIncidentBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewRetrieveResolveIncidentBadRequest creates RetrieveResolveIncidentBadRequest with default headers values
func NewRetrieveResolveIncidentBadRequest() *RetrieveResolveIncidentBadRequest {

	return &RetrieveResolveIncidentBadRequest{}
}

// WithPayload adds the payload to the retrieve resolve incident bad request response
func (o *RetrieveResolveIncidentBadRequest) WithPayload(payload *models.Error) *RetrieveResolveIncidentBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the retrieve resolve incident bad request response
func (o *RetrieveResolveIncidentBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RetrieveResolveIncidentBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// RetrieveResolveIncidentUnauthorizedCode is the HTTP code returned for type RetrieveResolveIncidentUnauthorized
const RetrieveResolveIncidentUnauthorizedCode int = 401

/*
RetrieveResolveIncidentUnauthorized Unauthorized

swagger:response retrieveResolveIncidentUnauthorized
*/
type RetrieveResolveIncidentUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewRetrieveResolveIncidentUnauthorized creates RetrieveResolveIncidentUnauthorized with default headers values
func NewRetrieveResolveIncidentUnauthorized() *RetrieveResolveIncidentUnauthorized {

	return &RetrieveResolveIncidentUnauthorized{}
}

// WithPayload adds the payload to the retrieve resolve incident unauthorized response
func (o *RetrieveResolveIncidentUnauthorized) WithPayload(payload *models.Error) *RetrieveResolveIncidentUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the retrieve resolve incident unauthorized response
func (o *RetrieveResolveIncidentUnauthorized) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RetrieveResolveIncidentUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// RetrieveResolveIncidentForbiddenCode is the HTTP code returned for type RetrieveResolveIncidentForbidden
const RetrieveResolveIncidentForbiddenCode int = 403

/*
RetrieveResolveIncidentForbidden Forbidden

swagger:response retrieveResolveIncidentForbidden
*/
type RetrieveResolveIncidentForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewRetrieveResolveIncidentForbidden creates RetrieveResolveIncidentForbidden with default headers values
func NewRetrieveResolveIncidentForbidden() *RetrieveResolveIncidentForbidden {

	return &RetrieveResolveIncidentForbidden{}
}

// WithPayload adds the payload to the retrieve resolve incident forbidden response
func (o *RetrieveResolveIncidentForbidden) WithPayload(payload *models.Error) *RetrieveResolveIncidentForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the retrieve resolve incident forbidden response
func (o *RetrieveResolveIncidentForbidden) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RetrieveResolveIncidentForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// RetrieveResolveIncidentNotFoundCode is the HTTP code returned for type RetrieveResolveIncidentNotFound
const RetrieveResolveIncidentNotFoundCode int = 404

/*
RetrieveResolveIncidentNotFound Not Found

swagger:response retrieveResolveIncidentNotFound
*/
type RetrieveResolveIncidentNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewRetrieveResolveIncidentNotFound creates RetrieveResolveIncidentNotFound with default headers values
func NewRetrieveResolveIncidentNotFound() *RetrieveResolveIncidentNotFound {

	return &RetrieveResolveIncidentNotFound{}
}

// WithPayload adds the payload to the retrieve resolve incident not found response
func (o *RetrieveResolveIncidentNotFound) WithPayload(payload *models.Error) *RetrieveResolveIncidentNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the retrieve resolve incident not found response
func (o *RetrieveResolveIncidentNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RetrieveResolveIncidentNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// RetrieveResolveIncidentMethodNotAllowedCode is the HTTP code returned for type RetrieveResolveIncidentMethodNotAllowed
const RetrieveResolveIncidentMethodNotAllowedCode int = 405

/*
RetrieveResolveIncidentMethodNotAllowed Method Not allowed

swagger:response retrieveResolveIncidentMethodNotAllowed
*/
type RetrieveResolveIncidentMethodNotAllowed struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewRetrieveResolveIncidentMethodNotAllowed creates RetrieveResolveIncidentMethodNotAllowed with default headers values
func NewRetrieveResolveIncidentMethodNotAllowed() *RetrieveResolveIncidentMethodNotAllowed {

	return &RetrieveResolveIncidentMethodNotAllowed{}
}

// WithPayload adds the payload to the retrieve resolve incident method not allowed response
func (o *RetrieveResolveIncidentMethodNotAllowed) WithPayload(payload *models.Error) *RetrieveResolveIncidentMethodNotAllowed {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the retrieve resolve incident method not allowed response
func (o *RetrieveResolveIncidentMethodNotAllowed) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RetrieveResolveIncidentMethodNotAllowed) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(405)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// RetrieveResolveIncidentConflictCode is the HTTP code returned for type RetrieveResolveIncidentConflict
const RetrieveResolveIncidentConflictCode int = 409

/*
RetrieveResolveIncidentConflict Conflict

swagger:response retrieveResolveIncidentConflict
*/
type RetrieveResolveIncidentConflict struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewRetrieveResolveIncidentConflict creates RetrieveResolveIncidentConflict with default headers values
func NewRetrieveResolveIncidentConflict() *RetrieveResolveIncidentConflict {

	return &RetrieveResolveIncidentConflict{}
}

// WithPayload adds the payload to the retrieve resolve incident conflict response
func (o *RetrieveResolveIncidentConflict) WithPayload(payload *models.Error) *RetrieveResolveIncidentConflict {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the retrieve resolve incident conflict response
func (o *RetrieveResolveIncidentConflict) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RetrieveResolveIncidentConflict) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(409)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// RetrieveResolveIncidentInternalServerErrorCode is the HTTP code returned for type RetrieveResolveIncidentInternalServerError
const RetrieveResolveIncidentInternalServerErrorCode int = 500

/*
RetrieveResolveIncidentInternalServerError Internal Server Error

swagger:response retrieveResolveIncidentInternalServerError
*/
type RetrieveResolveIncidentInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewRetrieveResolveIncidentInternalServerError creates RetrieveResolveIncidentInternalServerError with default headers values
func NewRetrieveResolveIncidentInternalServerError() *RetrieveResolveIncidentInternalServerError {

	return &RetrieveResolveIncidentInternalServerError{}
}

// WithPayload adds the payload to the retrieve resolve incident internal server error response
func (o *RetrieveResolveIncidentInternalServerError) WithPayload(payload *models.Error) *RetrieveResolveIncidentInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the retrieve resolve incident internal server error response
func (o *RetrieveResolveIncidentInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RetrieveResolveIncidentInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
