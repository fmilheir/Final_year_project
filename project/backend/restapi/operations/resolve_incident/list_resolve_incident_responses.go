// Code generated by go-swagger; DO NOT EDIT.

package resolve_incident

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	"github.com/fmilheir/final_year_project/backend/models"
)

// ListResolveIncidentOKCode is the HTTP code returned for type ListResolveIncidentOK
const ListResolveIncidentOKCode int = 200

/*
ListResolveIncidentOK Success

swagger:response listResolveIncidentOK
*/
type ListResolveIncidentOK struct {
	/*Actual number of items returned in the response body

	 */
	XResultCount int64 `json:"X-Result-Count"`
	/*Total number of items matching criteria

	 */
	XTotalCount int64 `json:"X-Total-Count"`

	/*
	  In: Body
	*/
	Payload []*models.ResolveIncident `json:"body,omitempty"`
}

// NewListResolveIncidentOK creates ListResolveIncidentOK with default headers values
func NewListResolveIncidentOK() *ListResolveIncidentOK {

	return &ListResolveIncidentOK{}
}

// WithXResultCount adds the xResultCount to the list resolve incident o k response
func (o *ListResolveIncidentOK) WithXResultCount(xResultCount int64) *ListResolveIncidentOK {
	o.XResultCount = xResultCount
	return o
}

// SetXResultCount sets the xResultCount to the list resolve incident o k response
func (o *ListResolveIncidentOK) SetXResultCount(xResultCount int64) {
	o.XResultCount = xResultCount
}

// WithXTotalCount adds the xTotalCount to the list resolve incident o k response
func (o *ListResolveIncidentOK) WithXTotalCount(xTotalCount int64) *ListResolveIncidentOK {
	o.XTotalCount = xTotalCount
	return o
}

// SetXTotalCount sets the xTotalCount to the list resolve incident o k response
func (o *ListResolveIncidentOK) SetXTotalCount(xTotalCount int64) {
	o.XTotalCount = xTotalCount
}

// WithPayload adds the payload to the list resolve incident o k response
func (o *ListResolveIncidentOK) WithPayload(payload []*models.ResolveIncident) *ListResolveIncidentOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list resolve incident o k response
func (o *ListResolveIncidentOK) SetPayload(payload []*models.ResolveIncident) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListResolveIncidentOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Result-Count

	xResultCount := swag.FormatInt64(o.XResultCount)
	if xResultCount != "" {
		rw.Header().Set("X-Result-Count", xResultCount)
	}

	// response header X-Total-Count

	xTotalCount := swag.FormatInt64(o.XTotalCount)
	if xTotalCount != "" {
		rw.Header().Set("X-Total-Count", xTotalCount)
	}

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		// return empty array
		payload = make([]*models.ResolveIncident, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// ListResolveIncidentBadRequestCode is the HTTP code returned for type ListResolveIncidentBadRequest
const ListResolveIncidentBadRequestCode int = 400

/*
ListResolveIncidentBadRequest Bad Request

swagger:response listResolveIncidentBadRequest
*/
type ListResolveIncidentBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewListResolveIncidentBadRequest creates ListResolveIncidentBadRequest with default headers values
func NewListResolveIncidentBadRequest() *ListResolveIncidentBadRequest {

	return &ListResolveIncidentBadRequest{}
}

// WithPayload adds the payload to the list resolve incident bad request response
func (o *ListResolveIncidentBadRequest) WithPayload(payload *models.Error) *ListResolveIncidentBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list resolve incident bad request response
func (o *ListResolveIncidentBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListResolveIncidentBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ListResolveIncidentUnauthorizedCode is the HTTP code returned for type ListResolveIncidentUnauthorized
const ListResolveIncidentUnauthorizedCode int = 401

/*
ListResolveIncidentUnauthorized Unauthorized

swagger:response listResolveIncidentUnauthorized
*/
type ListResolveIncidentUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewListResolveIncidentUnauthorized creates ListResolveIncidentUnauthorized with default headers values
func NewListResolveIncidentUnauthorized() *ListResolveIncidentUnauthorized {

	return &ListResolveIncidentUnauthorized{}
}

// WithPayload adds the payload to the list resolve incident unauthorized response
func (o *ListResolveIncidentUnauthorized) WithPayload(payload *models.Error) *ListResolveIncidentUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list resolve incident unauthorized response
func (o *ListResolveIncidentUnauthorized) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListResolveIncidentUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ListResolveIncidentForbiddenCode is the HTTP code returned for type ListResolveIncidentForbidden
const ListResolveIncidentForbiddenCode int = 403

/*
ListResolveIncidentForbidden Forbidden

swagger:response listResolveIncidentForbidden
*/
type ListResolveIncidentForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewListResolveIncidentForbidden creates ListResolveIncidentForbidden with default headers values
func NewListResolveIncidentForbidden() *ListResolveIncidentForbidden {

	return &ListResolveIncidentForbidden{}
}

// WithPayload adds the payload to the list resolve incident forbidden response
func (o *ListResolveIncidentForbidden) WithPayload(payload *models.Error) *ListResolveIncidentForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list resolve incident forbidden response
func (o *ListResolveIncidentForbidden) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListResolveIncidentForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ListResolveIncidentNotFoundCode is the HTTP code returned for type ListResolveIncidentNotFound
const ListResolveIncidentNotFoundCode int = 404

/*
ListResolveIncidentNotFound Not Found

swagger:response listResolveIncidentNotFound
*/
type ListResolveIncidentNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewListResolveIncidentNotFound creates ListResolveIncidentNotFound with default headers values
func NewListResolveIncidentNotFound() *ListResolveIncidentNotFound {

	return &ListResolveIncidentNotFound{}
}

// WithPayload adds the payload to the list resolve incident not found response
func (o *ListResolveIncidentNotFound) WithPayload(payload *models.Error) *ListResolveIncidentNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list resolve incident not found response
func (o *ListResolveIncidentNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListResolveIncidentNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ListResolveIncidentMethodNotAllowedCode is the HTTP code returned for type ListResolveIncidentMethodNotAllowed
const ListResolveIncidentMethodNotAllowedCode int = 405

/*
ListResolveIncidentMethodNotAllowed Method Not allowed

swagger:response listResolveIncidentMethodNotAllowed
*/
type ListResolveIncidentMethodNotAllowed struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewListResolveIncidentMethodNotAllowed creates ListResolveIncidentMethodNotAllowed with default headers values
func NewListResolveIncidentMethodNotAllowed() *ListResolveIncidentMethodNotAllowed {

	return &ListResolveIncidentMethodNotAllowed{}
}

// WithPayload adds the payload to the list resolve incident method not allowed response
func (o *ListResolveIncidentMethodNotAllowed) WithPayload(payload *models.Error) *ListResolveIncidentMethodNotAllowed {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list resolve incident method not allowed response
func (o *ListResolveIncidentMethodNotAllowed) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListResolveIncidentMethodNotAllowed) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(405)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ListResolveIncidentConflictCode is the HTTP code returned for type ListResolveIncidentConflict
const ListResolveIncidentConflictCode int = 409

/*
ListResolveIncidentConflict Conflict

swagger:response listResolveIncidentConflict
*/
type ListResolveIncidentConflict struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewListResolveIncidentConflict creates ListResolveIncidentConflict with default headers values
func NewListResolveIncidentConflict() *ListResolveIncidentConflict {

	return &ListResolveIncidentConflict{}
}

// WithPayload adds the payload to the list resolve incident conflict response
func (o *ListResolveIncidentConflict) WithPayload(payload *models.Error) *ListResolveIncidentConflict {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list resolve incident conflict response
func (o *ListResolveIncidentConflict) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListResolveIncidentConflict) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(409)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ListResolveIncidentInternalServerErrorCode is the HTTP code returned for type ListResolveIncidentInternalServerError
const ListResolveIncidentInternalServerErrorCode int = 500

/*
ListResolveIncidentInternalServerError Internal Server Error

swagger:response listResolveIncidentInternalServerError
*/
type ListResolveIncidentInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewListResolveIncidentInternalServerError creates ListResolveIncidentInternalServerError with default headers values
func NewListResolveIncidentInternalServerError() *ListResolveIncidentInternalServerError {

	return &ListResolveIncidentInternalServerError{}
}

// WithPayload adds the payload to the list resolve incident internal server error response
func (o *ListResolveIncidentInternalServerError) WithPayload(payload *models.Error) *ListResolveIncidentInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list resolve incident internal server error response
func (o *ListResolveIncidentInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListResolveIncidentInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
