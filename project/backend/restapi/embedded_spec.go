// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json;charset=utf-8"
  ],
  "produces": [
    "application/json;charset=utf-8"
  ],
  "schemes": [
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "**TMF API Reference : TMF - 724 Incident**\n\n**Release : 22.5 - November 2022**\n\nThe Incident API provides a standardized client interface to Incident Management Systems for creating, tracking and managing Incidents as a result of an issue or problem identified by a customer or another system. \nExamples of Incident API originators (clients) include CRM applications, network management or fault management systems, or other Incident management systems (e.g. B2B).\n\nThe API supports the ability to send requests to create a new Incident specifying the nature and severity of the trouble or issue as well as all necessary related information. The API also includes mechanisms to search for and update existing Incidents. Notifications are defined to provide information when a Incident has been updated, including status changes. A basic set of states of a Incident has been specified (as an example) to handle Incident lifecycle management.\nIncident API manages Incident resource:\n\n  -\tA Incident represents a record, or an issue raised by requestor that need to be solved, used for reporting and managing the resolution of problems, incidents or request -\tThe main Incident attributes are its name, priority, type,  dateTime attributes (occurTime, expected resolution, resolution), state and related information (change reason and change date), related parties (originator, owner, reviser, etc.), related entities (product, product order, customer bill) and notes Incident API performs the following operations on Incident -\tRetrieval of an Incident or a collection of Incident depending on filter criteria -\tPartial update of a Incident -\tCreation of an Incident -\tNotification of events on Incident: o\tIncident state change o\tIncident change o\tIncident resolved o\tIncident created o\tIncident Information required\n\n\n\nCopyright Â© TM Forum 2022. All Rights Reserved\n\n\n",
    "title": "Incident",
    "version": "4.0.1"
  },
  "host": "serverRoot",
  "basePath": "/tmf-api/Incident/v4/",
  "paths": {
    "/diagnoseIncident": {
      "get": {
        "description": "This operation list or find DiagnoseIncident entities",
        "tags": [
          "diagnoseIncident"
        ],
        "summary": "List or find DiagnoseIncident objects",
        "operationId": "listDiagnoseIncident",
        "parameters": [
          {
            "type": "string",
            "description": "Comma-separated properties to be provided in response",
            "name": "fields",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "Requested index for start of resources to be provided in response",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "Requested number of resources to be provided in response",
            "name": "limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DiagnoseIncident"
              }
            },
            "headers": {
              "X-Result-Count": {
                "type": "integer",
                "description": "Actual number of items returned in the response body"
              },
              "X-Total-Count": {
                "type": "integer",
                "description": "Total number of items matching criteria"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "description": "This operation creates a DiagnoseIncident entity.",
        "tags": [
          "diagnoseIncident"
        ],
        "summary": "Creates a DiagnoseIncident",
        "operationId": "createDiagnoseIncident",
        "parameters": [
          {
            "description": "The DiagnoseIncident to be created",
            "name": "diagnoseIncident",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DiagnoseIncident_Create"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/DiagnoseIncident"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/diagnoseIncident/{id}": {
      "get": {
        "description": "This operation retrieves a DiagnoseIncident entity. Attribute selection is enabled for all first level attributes.",
        "tags": [
          "diagnoseIncident"
        ],
        "summary": "Retrieves a DiagnoseIncident by ID",
        "operationId": "retrieveDiagnoseIncident",
        "parameters": [
          {
            "type": "string",
            "description": "Identifier of the DiagnoseIncident",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Comma-separated properties to provide in response",
            "name": "fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DiagnoseIncident"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/hub": {
      "post": {
        "description": "Sets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics.",
        "tags": [
          "events subscription"
        ],
        "summary": "Register a listener",
        "operationId": "registerListener",
        "parameters": [
          {
            "description": "Data containing the callback endpoint to deliver the information",
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EventSubscriptionInput"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Subscribed",
            "schema": {
              "$ref": "#/definitions/EventSubscription"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/hub/{id}": {
      "delete": {
        "description": "Resets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics.",
        "tags": [
          "events subscription"
        ],
        "summary": "Unregister a listener",
        "operationId": "unregisterListener",
        "parameters": [
          {
            "type": "string",
            "description": "The id of the registered listener",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/incident": {
      "get": {
        "description": "This operation list or find Incident entities",
        "tags": [
          "incident"
        ],
        "summary": "List or find Incident objects",
        "operationId": "listIncident",
        "parameters": [
          {
            "type": "string",
            "description": "Comma-separated properties to be provided in response",
            "name": "fields",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "Requested index for start of resources to be provided in response",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "Requested number of resources to be provided in response",
            "name": "limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Incident"
              }
            },
            "headers": {
              "X-Result-Count": {
                "type": "integer",
                "description": "Actual number of items returned in the response body"
              },
              "X-Total-Count": {
                "type": "integer",
                "description": "Total number of items matching criteria"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "description": "This operation creates a Incident entity.",
        "tags": [
          "incident"
        ],
        "summary": "Creates a Incident",
        "operationId": "createIncident",
        "parameters": [
          {
            "description": "The Incident to be created",
            "name": "incident",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Incident_Create"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Incident"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/incident/{id}": {
      "get": {
        "description": "This operation retrieves a Incident entity. Attribute selection is enabled for all first level attributes.",
        "tags": [
          "incident"
        ],
        "summary": "Retrieves a Incident by ID",
        "operationId": "retrieveIncident",
        "parameters": [
          {
            "type": "string",
            "description": "Identifier of the Incident",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Comma-separated properties to provide in response",
            "name": "fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Incident"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/listener/diagnoseIncidentCreateEvent": {
      "post": {
        "description": "Example of a client listener for receiving the notification DiagnoseIncidentCreateEvent",
        "tags": [
          "notification listeners (client side)"
        ],
        "summary": "Client listener for entity DiagnoseIncidentCreateEvent",
        "operationId": "listenToDiagnoseIncidentCreateEvent",
        "parameters": [
          {
            "description": "The event data",
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DiagnoseIncidentCreateEvent"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Notified",
            "schema": {
              "$ref": "#/definitions/EventSubscription"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/listener/diagnoseIncidentStateChangeEvent": {
      "post": {
        "description": "Example of a client listener for receiving the notification DiagnoseIncidentStateChangeEvent",
        "tags": [
          "notification listeners (client side)"
        ],
        "summary": "Client listener for entity DiagnoseIncidentStateChangeEvent",
        "operationId": "listenToDiagnoseIncidentStateChangeEvent",
        "parameters": [
          {
            "description": "The event data",
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DiagnoseIncidentStateChangeEvent"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Notified",
            "schema": {
              "$ref": "#/definitions/EventSubscription"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/listener/incidentCreateEvent": {
      "post": {
        "description": "Example of a client listener for receiving the notification IncidentCreateEvent",
        "tags": [
          "notification listeners (client side)"
        ],
        "summary": "Client listener for entity IncidentCreateEvent",
        "operationId": "listenToIncidentCreateEvent",
        "parameters": [
          {
            "description": "The event data",
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/IncidentCreateEvent"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Notified",
            "schema": {
              "$ref": "#/definitions/EventSubscription"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/listener/incidentStateChangeEvent": {
      "post": {
        "description": "Example of a client listener for receiving the notification IncidentStateChangeEvent",
        "tags": [
          "notification listeners (client side)"
        ],
        "summary": "Client listener for entity IncidentStateChangeEvent",
        "operationId": "listenToIncidentStateChangeEvent",
        "parameters": [
          {
            "description": "The event data",
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/IncidentStateChangeEvent"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Notified",
            "schema": {
              "$ref": "#/definitions/EventSubscription"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/listener/resolveIncidentCreateEvent": {
      "post": {
        "description": "Example of a client listener for receiving the notification ResolveIncidentCreateEvent",
        "tags": [
          "notification listeners (client side)"
        ],
        "summary": "Client listener for entity ResolveIncidentCreateEvent",
        "operationId": "listenToResolveIncidentCreateEvent",
        "parameters": [
          {
            "description": "The event data",
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ResolveIncidentCreateEvent"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Notified",
            "schema": {
              "$ref": "#/definitions/EventSubscription"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/listener/resolveIncidentStateChangeEvent": {
      "post": {
        "description": "Example of a client listener for receiving the notification ResolveIncidentStateChangeEvent",
        "tags": [
          "notification listeners (client side)"
        ],
        "summary": "Client listener for entity ResolveIncidentStateChangeEvent",
        "operationId": "listenToResolveIncidentStateChangeEvent",
        "parameters": [
          {
            "description": "The event data",
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ResolveIncidentStateChangeEvent"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Notified",
            "schema": {
              "$ref": "#/definitions/EventSubscription"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/resolveIncident": {
      "get": {
        "description": "This operation list or find ResolveIncident entities",
        "tags": [
          "resolveIncident"
        ],
        "summary": "List or find ResolveIncident objects",
        "operationId": "listResolveIncident",
        "parameters": [
          {
            "type": "string",
            "description": "Comma-separated properties to be provided in response",
            "name": "fields",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "Requested index for start of resources to be provided in response",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "Requested number of resources to be provided in response",
            "name": "limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ResolveIncident"
              }
            },
            "headers": {
              "X-Result-Count": {
                "type": "integer",
                "description": "Actual number of items returned in the response body"
              },
              "X-Total-Count": {
                "type": "integer",
                "description": "Total number of items matching criteria"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "description": "This operation creates a ResolveIncident entity.",
        "tags": [
          "resolveIncident"
        ],
        "summary": "Creates a ResolveIncident",
        "operationId": "createResolveIncident",
        "parameters": [
          {
            "description": "The ResolveIncident to be created",
            "name": "resolveIncident",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ResolveIncident_Create"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/ResolveIncident"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/resolveIncident/{id}": {
      "get": {
        "description": "This operation retrieves a ResolveIncident entity. Attribute selection is enabled for all first level attributes.",
        "tags": [
          "resolveIncident"
        ],
        "summary": "Retrieves a ResolveIncident by ID",
        "operationId": "retrieveResolveIncident",
        "parameters": [
          {
            "type": "string",
            "description": "Identifier of the ResolveIncident",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Comma-separated properties to provide in response",
            "name": "fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ResolveIncident"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Addressable": {
      "description": "Base schema for adressable entities",
      "type": "object",
      "properties": {
        "href": {
          "description": "Hyperlink reference",
          "type": "string",
          "format": "uri"
        },
        "id": {
          "description": "unique identifier",
          "type": "string"
        }
      }
    },
    "Any": {},
    "Characteristic": {
      "description": "Describes a given characteristic of an object or entity through a name/value pair.",
      "type": "object",
      "required": [
        "name",
        "value"
      ],
      "properties": {
        "@baseType": {
          "description": "When sub-classing, this defines the super-class",
          "type": "string"
        },
        "@schemaLocation": {
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
          "type": "string",
          "format": "uri"
        },
        "@type": {
          "description": "When sub-classing, this defines the sub-class Extensible name",
          "type": "string"
        },
        "characteristicRelationship": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CharacteristicRelationship"
          }
        },
        "id": {
          "description": "Unique identifier of the characteristic",
          "type": "string"
        },
        "name": {
          "description": "Name of the characteristic",
          "type": "string"
        },
        "value": {
          "description": "The value of the characteristic",
          "$ref": "#/definitions/Any"
        },
        "valueType": {
          "description": "Data type of the value of the characteristic",
          "type": "string"
        }
      }
    },
    "CharacteristicRelationship": {
      "description": "Another Characteristic that is related to the current Characteristic.",
      "type": "object",
      "properties": {
        "@baseType": {
          "description": "When sub-classing, this defines the super-class",
          "type": "string"
        },
        "@schemaLocation": {
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
          "type": "string",
          "format": "uri"
        },
        "@type": {
          "description": "When sub-classing, this defines the sub-class Extensible name",
          "type": "string"
        },
        "href": {
          "description": "Hyperlink reference",
          "type": "string",
          "format": "uri"
        },
        "id": {
          "description": "Unique identifier of the characteristic",
          "type": "string"
        },
        "relationshipType": {
          "description": "The type of relationship",
          "type": "string"
        }
      }
    },
    "DiagnoseIncident": {
      "description": "A stage in the incident lifecycle. The purpose of diagnosis is to identify a workaround for an incident (ITIL Service Operation). \nDiagnosing Incidents by Incident SN",
      "type": "object",
      "properties": {
        "@baseType": {
          "description": "When sub-classing, this defines the super-class",
          "type": "string"
        },
        "@schemaLocation": {
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
          "type": "string",
          "format": "uri"
        },
        "@type": {
          "description": "When sub-classing, this defines the sub-class Extensible name",
          "type": "string"
        },
        "errorLog": {
          "description": "Reason for failure",
          "type": "string"
        },
        "href": {
          "description": "Reference of the diagnose incident task",
          "type": "string",
          "format": "uri"
        },
        "id": {
          "description": "unique identifier",
          "type": "string"
        },
        "incident": {
          "$ref": "#/definitions/IncidentRef"
        },
        "state": {
          "$ref": "#/definitions/TaskStateType"
        }
      }
    },
    "DiagnoseIncidentCreateEvent": {
      "description": "The notification data structure",
      "type": "object",
      "properties": {
        "correlationId": {
          "description": "The correlation id for this event.",
          "type": "string"
        },
        "description": {
          "description": "An explnatory of the event.",
          "type": "string"
        },
        "domain": {
          "description": "The domain of the event.",
          "type": "string"
        },
        "event": {
          "description": "The event payload linked to the involved resource object",
          "$ref": "#/definitions/DiagnoseIncidentCreateEventPayload"
        },
        "eventId": {
          "description": "The identifier of the notification.",
          "type": "string"
        },
        "eventTime": {
          "description": "Time of the event occurrence.",
          "type": "string",
          "format": "date-time"
        },
        "eventType": {
          "description": "The type of the notification.",
          "type": "string"
        },
        "priority": {
          "description": "A priority.",
          "type": "string"
        },
        "timeOcurred": {
          "description": "The time the event occured.",
          "type": "string",
          "format": "date-time"
        },
        "title": {
          "description": "The title of the event.",
          "type": "string"
        }
      }
    },
    "DiagnoseIncidentCreateEventPayload": {
      "description": "The event data structure",
      "type": "object",
      "properties": {
        "diagnoseIncident": {
          "description": "The involved resource data for the event",
          "$ref": "#/definitions/DiagnoseIncident"
        }
      }
    },
    "DiagnoseIncidentStateChangeEvent": {
      "description": "The notification data structure",
      "type": "object",
      "properties": {
        "correlationId": {
          "description": "The correlation id for this event.",
          "type": "string"
        },
        "description": {
          "description": "An explnatory of the event.",
          "type": "string"
        },
        "domain": {
          "description": "The domain of the event.",
          "type": "string"
        },
        "event": {
          "description": "The event payload linked to the involved resource object",
          "$ref": "#/definitions/DiagnoseIncidentStateChangeEventPayload"
        },
        "eventId": {
          "description": "The identifier of the notification.",
          "type": "string"
        },
        "eventTime": {
          "description": "Time of the event occurrence.",
          "type": "string",
          "format": "date-time"
        },
        "eventType": {
          "description": "The type of the notification.",
          "type": "string"
        },
        "priority": {
          "description": "A priority.",
          "type": "string"
        },
        "timeOcurred": {
          "description": "The time the event occured.",
          "type": "string",
          "format": "date-time"
        },
        "title": {
          "description": "The title of the event.",
          "type": "string"
        }
      }
    },
    "DiagnoseIncidentStateChangeEventPayload": {
      "description": "The event data structure",
      "type": "object",
      "properties": {
        "diagnoseIncident": {
          "description": "The involved resource data for the event",
          "$ref": "#/definitions/DiagnoseIncident"
        }
      }
    },
    "DiagnoseIncident_Create": {
      "description": "A stage in the incident lifecycle. The purpose of diagnosis is to identify a workaround for an incident (ITIL Service Operation). \nDiagnosing Incidents by Incident SN\nSkipped properties: id,href",
      "type": "object",
      "required": [
        "incident"
      ],
      "properties": {
        "@baseType": {
          "description": "When sub-classing, this defines the super-class",
          "type": "string"
        },
        "@schemaLocation": {
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
          "type": "string",
          "format": "uri"
        },
        "@type": {
          "description": "When sub-classing, this defines the sub-class Extensible name",
          "type": "string"
        },
        "errorLog": {
          "description": "Reason for failure",
          "type": "string"
        },
        "incident": {
          "$ref": "#/definitions/IncidentRef"
        },
        "state": {
          "$ref": "#/definitions/TaskStateType"
        }
      }
    },
    "Entity": {
      "description": "Base entity schema for use in TMForum Open-APIs",
      "type": "object",
      "properties": {
        "@baseType": {
          "description": "When sub-classing, this defines the super-class",
          "type": "string"
        },
        "@schemaLocation": {
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
          "type": "string",
          "format": "uri"
        },
        "@type": {
          "description": "When sub-classing, this defines the sub-class Extensible name",
          "type": "string"
        },
        "href": {
          "description": "Hyperlink reference",
          "type": "string",
          "format": "uri"
        },
        "id": {
          "description": "unique identifier",
          "type": "string"
        }
      }
    },
    "EntityRef": {
      "description": "Entity reference schema to be use for all entityRef class.",
      "type": "object",
      "required": [
        "id"
      ],
      "properties": {
        "@baseType": {
          "description": "When sub-classing, this defines the super-class",
          "type": "string"
        },
        "@referredType": {
          "description": "The actual type of the target instance when needed for disambiguation.",
          "type": "string"
        },
        "@schemaLocation": {
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
          "type": "string",
          "format": "uri"
        },
        "@type": {
          "description": "When sub-classing, this defines the sub-class Extensible name",
          "type": "string"
        },
        "href": {
          "description": "Hyperlink reference",
          "type": "string",
          "format": "uri"
        },
        "id": {
          "description": "unique identifier",
          "type": "string"
        },
        "name": {
          "description": "Name of the related entity.",
          "type": "string"
        }
      }
    },
    "Error": {
      "description": "Used when an API throws an Error, typically with a HTTP error response-code (3xx, 4xx, 5xx)",
      "type": "object",
      "required": [
        "code",
        "reason"
      ],
      "properties": {
        "@baseType": {
          "description": "When sub-classing, this defines the super-class.",
          "type": "string"
        },
        "@schemaLocation": {
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
          "type": "string",
          "format": "uri"
        },
        "@type": {
          "description": "When sub-classing, this defines the sub-class entity name.",
          "type": "string"
        },
        "code": {
          "description": "Application relevant detail, defined in the API or a common list.",
          "type": "string"
        },
        "message": {
          "description": "More details and corrective actions related to the error which can be shown to a client user.",
          "type": "string"
        },
        "reason": {
          "description": "Explanation of the reason for the error which can be shown to a client user.",
          "type": "string"
        },
        "referenceError": {
          "description": "URI of documentation describing the error.",
          "type": "string",
          "format": "uri"
        },
        "status": {
          "description": "HTTP Error code extension",
          "type": "string"
        }
      }
    },
    "EventSubscription": {
      "description": "Sets the communication endpoint address the service instance must use to deliver notification information",
      "type": "object",
      "required": [
        "id",
        "callback"
      ],
      "properties": {
        "callback": {
          "description": "The callback being registered.",
          "type": "string"
        },
        "id": {
          "description": "Id of the listener",
          "type": "string"
        },
        "query": {
          "description": "additional data to be passed",
          "type": "string"
        }
      }
    },
    "EventSubscriptionInput": {
      "description": "Sets the communication endpoint address the service instance must use to deliver notification information",
      "type": "object",
      "required": [
        "callback"
      ],
      "properties": {
        "callback": {
          "description": "The callback being registered.",
          "type": "string"
        },
        "query": {
          "description": "additional data to be passed",
          "type": "string"
        }
      }
    },
    "Extensible": {
      "description": "Base Extensible schema for use in TMForum Open-APIs",
      "type": "object",
      "properties": {
        "@baseType": {
          "description": "When sub-classing, this defines the super-class",
          "type": "string"
        },
        "@schemaLocation": {
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
          "type": "string",
          "format": "uri"
        },
        "@type": {
          "description": "When sub-classing, this defines the sub-class Extensible name",
          "type": "string"
        }
      }
    },
    "ExternalIdentifier": {
      "description": "An identification of an entity that is owned by or originates in a software system different from the current system, for example a ProductOrder handed off from a commerce platform into an order handling system. The structure identifies the system itself, the nature of the entity within the system (e.g. class name) and the unique ID of the entity within the system. It is anticipated that multiple external IDs can be held for a single entity, e.g. if the entity passed through multiple systems on the way to the current system. In this case the consumer is expected to sequence the IDs in the array in reverse order of provenance, i.e. most recent system first in the list.",
      "type": "object",
      "required": [
        "id"
      ],
      "properties": {
        "@baseType": {
          "description": "When sub-classing, this defines the super-class",
          "type": "string"
        },
        "@schemaLocation": {
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
          "type": "string",
          "format": "uri"
        },
        "@type": {
          "description": "When sub-classing, this defines the sub-class Extensible name",
          "type": "string"
        },
        "externalIdentifierType": {
          "description": "Type of the identification, typically would be the type of the entity within the external system",
          "type": "string",
          "example": "ProductOrder"
        },
        "href": {
          "description": "Hyperlink reference",
          "type": "string",
          "format": "uri"
        },
        "id": {
          "description": "identification of the entity within the external system.",
          "type": "string",
          "example": "MC2255771199555"
        },
        "owner": {
          "description": "Name of the external system that owns the entity.",
          "type": "string",
          "example": "MagentoCommerce"
        }
      }
    },
    "ImpactType": {
      "description": "Possible values for the impact of an Incident",
      "type": "string",
      "enum": [
        "extensive",
        "significant",
        "moderate",
        "minor"
      ]
    },
    "Incident": {
      "description": "An Incident is a record of an event that has altered the operational state of a entity (Resource, Service or Customers Product). An incident represents an issue that needs to be diagnosed and resolved.",
      "type": "object",
      "properties": {
        "@baseType": {
          "description": "When sub-classing, this defines the super-class",
          "type": "string"
        },
        "@schemaLocation": {
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
          "type": "string",
          "format": "uri"
        },
        "@type": {
          "description": "When sub-classing, this defines the sub-class Extensible name",
          "type": "string"
        },
        "ackState": {
          "description": "Provides the Acknowledgement State of the incident (unacknowledged | acknowledged).",
          "$ref": "#/definitions/IncidentAckStateType"
        },
        "ackTime": {
          "description": "The ackTime or acknowledgeTime of the incident. An acknowledged incident is being worked on, but is not yet resolved",
          "type": "string",
          "format": "date-time",
          "example": "2022-03-10T04:01:12Z"
        },
        "affectedEntity": {
          "description": "List of affected entities ",
          "type": "array",
          "items": {
            "$ref": "#/definitions/EntityRef"
          },
          "example": "e.g  a ref to a service or resource"
        },
        "category": {
          "description": "The category of the incident  (category is the term used by ITU) ",
          "type": "string",
          "example": "BTS Software Fault"
        },
        "clearTime": {
          "description": "The clear time of the incident",
          "type": "string",
          "format": "date-time",
          "example": "2022-03-10T04:01:12Z"
        },
        "domain": {
          "description": "The domain of the incident, for example RAN, PON, OTN, Cross-Domain etc",
          "type": "string"
        },
        "eventId": {
          "description": "The correlation event object such as alarm, externalAlarm, performance, etc.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResourceEntity"
          }
        },
        "extensionInfo": {
          "description": "This is used for extend the incident with attributes",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Characteristic"
          }
        },
        "externalIdentifier": {
          "description": "An identification of an entity that is owned by or originates in a software system different from the current system, for example a ProductOrder handed off from a commerce platform into an order handling system. The structure identifies the system itself, the nature of the entity within the system (e.g. class name) and the unique ID of the entity within the system. It is anticipated that multiple external IDs can be held for a single entity, e.g. if the entity passed through multiple systems on the way to the current system. In this case the consumer is expected to sequence the IDs in the array in reverse order of provenance, i.e. most recent system first in the list.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExternalIdentifier"
          }
        },
        "href": {
          "description": "Hyperlink, a reference to the incident entity",
          "type": "string"
        },
        "id": {
          "description": "unique identifier",
          "type": "string"
        },
        "impact": {
          "description": "Impact which indicates the degree of impact on affected services or users. This field is optional. The options are extensive, significant, moderate, and minor",
          "$ref": "#/definitions/ImpactType"
        },
        "incidentDetail": {
          "description": "A textual succinct description of the nature, symptoms, cause, or effect of the incident.",
          "type": "string"
        },
        "incidentResolutionSuggestion": {
          "description": "Incident resolution suggestion or tip to resolve the incident",
          "type": "string"
        },
        "name": {
          "description": "The name of the incident. A short-form string that provides succinct, important information about the incident",
          "type": "string"
        },
        "occurTime": {
          "description": "Indicates the time (as a date + time) at which the incident occurred at its source",
          "type": "string",
          "format": "date-time",
          "example": "2022-03-10T04:01:12Z"
        },
        "priority": {
          "description": "The priority  of the incident, priority  critical/high/medium/low",
          "$ref": "#/definitions/PriorityType"
        },
        "rootCause": {
          "description": "A root cause is a fundamental or underlying reason behind why an incident occurred that identifies one or more failures. An incident many have multiple rootCauses",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RootCause"
          }
        },
        "rootEventId": {
          "description": "The root event object such as alarm, externalAlarm, performance, etc.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResourceEntity"
          }
        },
        "sourceObject": {
          "description": "The objects show the incident, it may be part of Network Equipment. Fault object, which may be an NE or a port.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResourceEntity"
          },
          "example": "e.g. weak optical signals, the fault object is a PON port, the root cause is an optical splitter, and the affected object is an ONU"
        },
        "state": {
          "description": "Incident state. The options are raised | updated | cleared. Cleared means Resolved)",
          "$ref": "#/definitions/IncidentStateType"
        },
        "updateTime": {
          "description": "The last update time  of the incident",
          "type": "string",
          "example": "2022-03-10T04:01:12Z"
        },
        "urgency": {
          "description": "Urgency is the speed required for resolving the service issues. A measure of how long it will be until an incident has a significant impact on the business. This field is optional. The options are critical, high, medium, and low",
          "$ref": "#/definitions/UrgencyType"
        }
      }
    },
    "IncidentAckStateType": {
      "description": "Possible values for the ack state of an Incident",
      "type": "string",
      "enum": [
        "acknowledged",
        "unacknowledged"
      ]
    },
    "IncidentCreateEvent": {
      "description": "The notification data structure",
      "type": "object",
      "properties": {
        "correlationId": {
          "description": "The correlation id for this event.",
          "type": "string"
        },
        "description": {
          "description": "An explnatory of the event.",
          "type": "string"
        },
        "domain": {
          "description": "The domain of the event.",
          "type": "string"
        },
        "event": {
          "description": "The event payload linked to the involved resource object",
          "$ref": "#/definitions/IncidentCreateEventPayload"
        },
        "eventId": {
          "description": "The identifier of the notification.",
          "type": "string"
        },
        "eventTime": {
          "description": "Time of the event occurrence.",
          "type": "string",
          "format": "date-time"
        },
        "eventType": {
          "description": "The type of the notification.",
          "type": "string"
        },
        "priority": {
          "description": "A priority.",
          "type": "string"
        },
        "timeOcurred": {
          "description": "The time the event occured.",
          "type": "string",
          "format": "date-time"
        },
        "title": {
          "description": "The title of the event.",
          "type": "string"
        }
      }
    },
    "IncidentCreateEventPayload": {
      "description": "The event data structure",
      "type": "object",
      "properties": {
        "incident": {
          "description": "The involved resource data for the event",
          "$ref": "#/definitions/Incident"
        }
      }
    },
    "IncidentRef": {
      "description": "Incident reference.",
      "type": "object",
      "required": [
        "id"
      ],
      "properties": {
        "@baseType": {
          "description": "When sub-classing, this defines the super-class",
          "type": "string"
        },
        "@referredType": {
          "description": "The actual type of the target instance when needed for disambiguation.",
          "type": "string"
        },
        "@schemaLocation": {
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
          "type": "string",
          "format": "uri"
        },
        "@type": {
          "description": "When sub-classing, this defines the sub-class Extensible name",
          "type": "string"
        },
        "href": {
          "description": "Hyperlink reference",
          "type": "string",
          "format": "uri"
        },
        "id": {
          "description": "unique identifier",
          "type": "string"
        },
        "name": {
          "description": "Name of the related incident",
          "type": "string"
        }
      }
    },
    "IncidentStateChangeEvent": {
      "description": "The notification data structure",
      "type": "object",
      "properties": {
        "correlationId": {
          "description": "The correlation id for this event.",
          "type": "string"
        },
        "description": {
          "description": "An explnatory of the event.",
          "type": "string"
        },
        "domain": {
          "description": "The domain of the event.",
          "type": "string"
        },
        "event": {
          "description": "The event payload linked to the involved resource object",
          "$ref": "#/definitions/IncidentStateChangeEventPayload"
        },
        "eventId": {
          "description": "The identifier of the notification.",
          "type": "string"
        },
        "eventTime": {
          "description": "Time of the event occurrence.",
          "type": "string",
          "format": "date-time"
        },
        "eventType": {
          "description": "The type of the notification.",
          "type": "string"
        },
        "priority": {
          "description": "A priority.",
          "type": "string"
        },
        "timeOcurred": {
          "description": "The time the event occured.",
          "type": "string",
          "format": "date-time"
        },
        "title": {
          "description": "The title of the event.",
          "type": "string"
        }
      }
    },
    "IncidentStateChangeEventPayload": {
      "description": "The event data structure",
      "type": "object",
      "properties": {
        "incident": {
          "description": "The involved resource data for the event",
          "$ref": "#/definitions/Incident"
        }
      }
    },
    "IncidentStateType": {
      "description": "Possible values for the state of an Incident",
      "type": "string",
      "enum": [
        "raised",
        "updated",
        "cleared"
      ]
    },
    "Incident_Create": {
      "description": "An Incident is a record of an event that has altered the operational state of a entity (Resource, Service or Customers Product). An incident represents an issue that needs to be diagnosed and resolved.\nSkipped properties: id,href,lifecycleStatus,creationDate,statusChangeDate",
      "type": "object",
      "required": [
        "name",
        "category",
        "priority",
        "state",
        "ackState",
        "occurTime",
        "domain",
        "sourceObject"
      ],
      "properties": {
        "@baseType": {
          "description": "When sub-classing, this defines the super-class",
          "type": "string"
        },
        "@schemaLocation": {
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
          "type": "string",
          "format": "uri"
        },
        "@type": {
          "description": "When sub-classing, this defines the sub-class Extensible name",
          "type": "string"
        },
        "ackState": {
          "description": "Provides the Acknowledgement State of the incident (unacknowledged | acknowledged).",
          "$ref": "#/definitions/IncidentAckStateType"
        },
        "ackTime": {
          "description": "The ackTime or acknowledgeTime of the incident. An acknowledged incident is being worked on, but is not yet resolved",
          "type": "string",
          "format": "date-time",
          "example": "2022-03-10T04:01:12Z"
        },
        "affectedEntity": {
          "description": "List of affected entities ",
          "type": "array",
          "items": {
            "$ref": "#/definitions/EntityRef"
          },
          "example": "e.g  a ref to a service or resource"
        },
        "category": {
          "description": "The category of the incident  (category is the term used by ITU) ",
          "type": "string",
          "example": "BTS Software Fault"
        },
        "clearTime": {
          "description": "The clear time of the incident",
          "type": "string",
          "format": "date-time",
          "example": "2022-03-10T04:01:12Z"
        },
        "domain": {
          "description": "The domain of the incident, for example RAN, PON, OTN, Cross-Domain etc",
          "type": "string"
        },
        "eventId": {
          "description": "The correlation event object such as alarm, externalAlarm, performance, etc.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResourceEntity"
          }
        },
        "extensionInfo": {
          "description": "This is used for extend the incident with attributes",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Characteristic"
          }
        },
        "externalIdentifier": {
          "description": "An identification of an entity that is owned by or originates in a software system different from the current system, for example a ProductOrder handed off from a commerce platform into an order handling system. The structure identifies the system itself, the nature of the entity within the system (e.g. class name) and the unique ID of the entity within the system. It is anticipated that multiple external IDs can be held for a single entity, e.g. if the entity passed through multiple systems on the way to the current system. In this case the consumer is expected to sequence the IDs in the array in reverse order of provenance, i.e. most recent system first in the list.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExternalIdentifier"
          }
        },
        "impact": {
          "description": "Impact which indicates the degree of impact on affected services or users. This field is optional. The options are extensive, significant, moderate, and minor",
          "$ref": "#/definitions/ImpactType"
        },
        "incidentDetail": {
          "description": "A textual succinct description of the nature, symptoms, cause, or effect of the incident.",
          "type": "string"
        },
        "incidentResolutionSuggestion": {
          "description": "Incident resolution suggestion or tip to resolve the incident",
          "type": "string"
        },
        "name": {
          "description": "The name of the incident. A short-form string that provides succinct, important information about the incident",
          "type": "string"
        },
        "occurTime": {
          "description": "Indicates the time (as a date + time) at which the incident occurred at its source",
          "type": "string",
          "format": "date-time",
          "example": "2022-03-10T04:01:12Z"
        },
        "priority": {
          "description": "The priority  of the incident, priority  critical/high/medium/low",
          "$ref": "#/definitions/PriorityType"
        },
        "rootCause": {
          "description": "A root cause is a fundamental or underlying reason behind why an incident occurred that identifies one or more failures. An incident many have multiple rootCauses",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RootCause"
          }
        },
        "rootEventId": {
          "description": "The root event object such as alarm, externalAlarm, performance, etc.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResourceEntity"
          }
        },
        "sourceObject": {
          "description": "The objects show the incident, it may be part of Network Equipment. Fault object, which may be an NE or a port.",
          "type": "array",
          "minItems": 1,
          "items": {
            "$ref": "#/definitions/ResourceEntity"
          },
          "example": "e.g. weak optical signals, the fault object is a PON port, the root cause is an optical splitter, and the affected object is an ONU"
        },
        "state": {
          "description": "Incident state. The options are raised | updated | cleared. Cleared means Resolved)",
          "$ref": "#/definitions/IncidentStateType"
        },
        "updateTime": {
          "description": "The last update time  of the incident",
          "type": "string",
          "example": "2022-03-10T04:01:12Z"
        },
        "urgency": {
          "description": "Urgency is the speed required for resolving the service issues. A measure of how long it will be until an incident has a significant impact on the business. This field is optional. The options are critical, high, medium, and low",
          "$ref": "#/definitions/UrgencyType"
        }
      }
    },
    "PriorityType": {
      "description": "Possible values for the Priority of an Incident",
      "type": "string",
      "enum": [
        "critical",
        "high",
        "medium",
        "low"
      ]
    },
    "ResolveIncident": {
      "description": "An incident resolution is an action taken to resolve/repair the root cause of an incident or problem, or to implement a workaround",
      "type": "object",
      "properties": {
        "@baseType": {
          "description": "When sub-classing, this defines the super-class",
          "type": "string"
        },
        "@schemaLocation": {
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
          "type": "string",
          "format": "uri"
        },
        "@type": {
          "description": "When sub-classing, this defines the sub-class Extensible name",
          "type": "string"
        },
        "clearTime": {
          "description": "The clear time  of the incident, for example 2020-03-10T04:01:12Z",
          "type": "string"
        },
        "errorLog": {
          "description": "Reason for failure",
          "type": "string"
        },
        "href": {
          "description": "Reference of the resolve incident task",
          "type": "string",
          "format": "uri"
        },
        "id": {
          "description": "Identifier of the  incident to resolve",
          "type": "string"
        },
        "incident": {
          "$ref": "#/definitions/IncidentRef"
        },
        "state": {
          "$ref": "#/definitions/TaskStateType"
        }
      }
    },
    "ResolveIncidentCreateEvent": {
      "description": "The notification data structure",
      "type": "object",
      "properties": {
        "correlationId": {
          "description": "The correlation id for this event.",
          "type": "string"
        },
        "description": {
          "description": "An explnatory of the event.",
          "type": "string"
        },
        "domain": {
          "description": "The domain of the event.",
          "type": "string"
        },
        "event": {
          "description": "The event payload linked to the involved resource object",
          "$ref": "#/definitions/ResolveIncidentCreateEventPayload"
        },
        "eventId": {
          "description": "The identifier of the notification.",
          "type": "string"
        },
        "eventTime": {
          "description": "Time of the event occurrence.",
          "type": "string",
          "format": "date-time"
        },
        "eventType": {
          "description": "The type of the notification.",
          "type": "string"
        },
        "priority": {
          "description": "A priority.",
          "type": "string"
        },
        "timeOcurred": {
          "description": "The time the event occured.",
          "type": "string",
          "format": "date-time"
        },
        "title": {
          "description": "The title of the event.",
          "type": "string"
        }
      }
    },
    "ResolveIncidentCreateEventPayload": {
      "description": "The event data structure",
      "type": "object",
      "properties": {
        "resolveIncident": {
          "description": "The involved resource data for the event",
          "$ref": "#/definitions/ResolveIncident"
        }
      }
    },
    "ResolveIncidentStateChangeEvent": {
      "description": "The notification data structure",
      "type": "object",
      "properties": {
        "correlationId": {
          "description": "The correlation id for this event.",
          "type": "string"
        },
        "description": {
          "description": "An explnatory of the event.",
          "type": "string"
        },
        "domain": {
          "description": "The domain of the event.",
          "type": "string"
        },
        "event": {
          "description": "The event payload linked to the involved resource object",
          "$ref": "#/definitions/ResolveIncidentStateChangeEventPayload"
        },
        "eventId": {
          "description": "The identifier of the notification.",
          "type": "string"
        },
        "eventTime": {
          "description": "Time of the event occurrence.",
          "type": "string",
          "format": "date-time"
        },
        "eventType": {
          "description": "The type of the notification.",
          "type": "string"
        },
        "priority": {
          "description": "A priority.",
          "type": "string"
        },
        "timeOcurred": {
          "description": "The time the event occured.",
          "type": "string",
          "format": "date-time"
        },
        "title": {
          "description": "The title of the event.",
          "type": "string"
        }
      }
    },
    "ResolveIncidentStateChangeEventPayload": {
      "description": "The event data structure",
      "type": "object",
      "properties": {
        "resolveIncident": {
          "description": "The involved resource data for the event",
          "$ref": "#/definitions/ResolveIncident"
        }
      }
    },
    "ResolveIncident_Create": {
      "description": "An incident resolution is an action taken to resolve/repair the root cause of an incident or problem, or to implement a workaround\nSkipped properties: id,href",
      "type": "object",
      "required": [
        "incident"
      ],
      "properties": {
        "@baseType": {
          "description": "When sub-classing, this defines the super-class",
          "type": "string"
        },
        "@schemaLocation": {
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
          "type": "string",
          "format": "uri"
        },
        "@type": {
          "description": "When sub-classing, this defines the sub-class Extensible name",
          "type": "string"
        },
        "clearTime": {
          "description": "The clear time  of the incident, for example 2020-03-10T04:01:12Z",
          "type": "string"
        },
        "errorLog": {
          "description": "Reason for failure",
          "type": "string"
        },
        "incident": {
          "$ref": "#/definitions/IncidentRef"
        },
        "state": {
          "$ref": "#/definitions/TaskStateType"
        }
      }
    },
    "ResourceEntity": {
      "description": "Base schema for REST Resources",
      "type": "object",
      "properties": {
        "@baseType": {
          "description": "When sub-classing, this defines the super-class",
          "type": "string"
        },
        "@schemaLocation": {
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
          "type": "string",
          "format": "uri"
        },
        "@type": {
          "description": "When sub-classing, this defines the sub-class Extensible name",
          "type": "string"
        },
        "href": {
          "description": "Hyperlink to access the test resource",
          "type": "string",
          "example": "http://myservice.com/resource-path"
        },
        "id": {
          "description": "ID created by the implementing service",
          "type": "string",
          "example": "aac9969d-219d-4ff1-b256-1765dcf9b342"
        }
      }
    },
    "RootCause": {
      "description": "The name of RootCause, for example:Power Down",
      "type": "object",
      "required": [
        "location"
      ],
      "properties": {
        "@baseType": {
          "description": "When sub-classing, this defines the super-class",
          "type": "string"
        },
        "@schemaLocation": {
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
          "type": "string",
          "format": "uri"
        },
        "@type": {
          "description": "When sub-classing, this defines the sub-class Extensible name",
          "type": "string"
        },
        "href": {
          "description": "Hyperlink reference",
          "type": "string",
          "format": "uri"
        },
        "id": {
          "description": "unique identifier",
          "type": "string"
        },
        "location": {
          "type": "string",
          "example": "Ne Name=cc_lte1, Cabinet No.=0, Subrack No.=0, Slot No.=0"
        }
      }
    },
    "TaskStateType": {
      "description": "Possible values for the state of a task",
      "type": "string",
      "enum": [
        "accepted",
        "terminatedWithError",
        "inProgress",
        "done"
      ]
    },
    "UrgencyType": {
      "description": "Possible values for the urgency of an Incident",
      "type": "string",
      "enum": [
        "critical",
        "high",
        "medium",
        "low"
      ]
    }
  },
  "tags": [
    {
      "name": "incident"
    },
    {
      "name": "diagnoseIncident"
    },
    {
      "name": "resolveIncident"
    },
    {
      "name": "notification listeners (client side)"
    },
    {
      "name": "events subscription"
    }
  ]
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json;charset=utf-8"
  ],
  "produces": [
    "application/json;charset=utf-8"
  ],
  "schemes": [
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "**TMF API Reference : TMF - 724 Incident**\n\n**Release : 22.5 - November 2022**\n\nThe Incident API provides a standardized client interface to Incident Management Systems for creating, tracking and managing Incidents as a result of an issue or problem identified by a customer or another system. \nExamples of Incident API originators (clients) include CRM applications, network management or fault management systems, or other Incident management systems (e.g. B2B).\n\nThe API supports the ability to send requests to create a new Incident specifying the nature and severity of the trouble or issue as well as all necessary related information. The API also includes mechanisms to search for and update existing Incidents. Notifications are defined to provide information when a Incident has been updated, including status changes. A basic set of states of a Incident has been specified (as an example) to handle Incident lifecycle management.\nIncident API manages Incident resource:\n\n  -\tA Incident represents a record, or an issue raised by requestor that need to be solved, used for reporting and managing the resolution of problems, incidents or request -\tThe main Incident attributes are its name, priority, type,  dateTime attributes (occurTime, expected resolution, resolution), state and related information (change reason and change date), related parties (originator, owner, reviser, etc.), related entities (product, product order, customer bill) and notes Incident API performs the following operations on Incident -\tRetrieval of an Incident or a collection of Incident depending on filter criteria -\tPartial update of a Incident -\tCreation of an Incident -\tNotification of events on Incident: o\tIncident state change o\tIncident change o\tIncident resolved o\tIncident created o\tIncident Information required\n\n\n\nCopyright Â© TM Forum 2022. All Rights Reserved\n\n\n",
    "title": "Incident",
    "version": "4.0.1"
  },
  "host": "serverRoot",
  "basePath": "/tmf-api/Incident/v4/",
  "paths": {
    "/diagnoseIncident": {
      "get": {
        "description": "This operation list or find DiagnoseIncident entities",
        "tags": [
          "diagnoseIncident"
        ],
        "summary": "List or find DiagnoseIncident objects",
        "operationId": "listDiagnoseIncident",
        "parameters": [
          {
            "type": "string",
            "description": "Comma-separated properties to be provided in response",
            "name": "fields",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "Requested index for start of resources to be provided in response",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "Requested number of resources to be provided in response",
            "name": "limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DiagnoseIncident"
              }
            },
            "headers": {
              "X-Result-Count": {
                "type": "integer",
                "description": "Actual number of items returned in the response body"
              },
              "X-Total-Count": {
                "type": "integer",
                "description": "Total number of items matching criteria"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "description": "This operation creates a DiagnoseIncident entity.",
        "tags": [
          "diagnoseIncident"
        ],
        "summary": "Creates a DiagnoseIncident",
        "operationId": "createDiagnoseIncident",
        "parameters": [
          {
            "description": "The DiagnoseIncident to be created",
            "name": "diagnoseIncident",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DiagnoseIncident_Create"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/DiagnoseIncident"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/diagnoseIncident/{id}": {
      "get": {
        "description": "This operation retrieves a DiagnoseIncident entity. Attribute selection is enabled for all first level attributes.",
        "tags": [
          "diagnoseIncident"
        ],
        "summary": "Retrieves a DiagnoseIncident by ID",
        "operationId": "retrieveDiagnoseIncident",
        "parameters": [
          {
            "type": "string",
            "description": "Identifier of the DiagnoseIncident",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Comma-separated properties to provide in response",
            "name": "fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DiagnoseIncident"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/hub": {
      "post": {
        "description": "Sets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics.",
        "tags": [
          "events subscription"
        ],
        "summary": "Register a listener",
        "operationId": "registerListener",
        "parameters": [
          {
            "description": "Data containing the callback endpoint to deliver the information",
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EventSubscriptionInput"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Subscribed",
            "schema": {
              "$ref": "#/definitions/EventSubscription"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/hub/{id}": {
      "delete": {
        "description": "Resets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics.",
        "tags": [
          "events subscription"
        ],
        "summary": "Unregister a listener",
        "operationId": "unregisterListener",
        "parameters": [
          {
            "type": "string",
            "description": "The id of the registered listener",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/incident": {
      "get": {
        "description": "This operation list or find Incident entities",
        "tags": [
          "incident"
        ],
        "summary": "List or find Incident objects",
        "operationId": "listIncident",
        "parameters": [
          {
            "type": "string",
            "description": "Comma-separated properties to be provided in response",
            "name": "fields",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "Requested index for start of resources to be provided in response",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "Requested number of resources to be provided in response",
            "name": "limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Incident"
              }
            },
            "headers": {
              "X-Result-Count": {
                "type": "integer",
                "description": "Actual number of items returned in the response body"
              },
              "X-Total-Count": {
                "type": "integer",
                "description": "Total number of items matching criteria"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "description": "This operation creates a Incident entity.",
        "tags": [
          "incident"
        ],
        "summary": "Creates a Incident",
        "operationId": "createIncident",
        "parameters": [
          {
            "description": "The Incident to be created",
            "name": "incident",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Incident_Create"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Incident"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/incident/{id}": {
      "get": {
        "description": "This operation retrieves a Incident entity. Attribute selection is enabled for all first level attributes.",
        "tags": [
          "incident"
        ],
        "summary": "Retrieves a Incident by ID",
        "operationId": "retrieveIncident",
        "parameters": [
          {
            "type": "string",
            "description": "Identifier of the Incident",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Comma-separated properties to provide in response",
            "name": "fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Incident"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/listener/diagnoseIncidentCreateEvent": {
      "post": {
        "description": "Example of a client listener for receiving the notification DiagnoseIncidentCreateEvent",
        "tags": [
          "notification listeners (client side)"
        ],
        "summary": "Client listener for entity DiagnoseIncidentCreateEvent",
        "operationId": "listenToDiagnoseIncidentCreateEvent",
        "parameters": [
          {
            "description": "The event data",
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DiagnoseIncidentCreateEvent"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Notified",
            "schema": {
              "$ref": "#/definitions/EventSubscription"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/listener/diagnoseIncidentStateChangeEvent": {
      "post": {
        "description": "Example of a client listener for receiving the notification DiagnoseIncidentStateChangeEvent",
        "tags": [
          "notification listeners (client side)"
        ],
        "summary": "Client listener for entity DiagnoseIncidentStateChangeEvent",
        "operationId": "listenToDiagnoseIncidentStateChangeEvent",
        "parameters": [
          {
            "description": "The event data",
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DiagnoseIncidentStateChangeEvent"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Notified",
            "schema": {
              "$ref": "#/definitions/EventSubscription"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/listener/incidentCreateEvent": {
      "post": {
        "description": "Example of a client listener for receiving the notification IncidentCreateEvent",
        "tags": [
          "notification listeners (client side)"
        ],
        "summary": "Client listener for entity IncidentCreateEvent",
        "operationId": "listenToIncidentCreateEvent",
        "parameters": [
          {
            "description": "The event data",
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/IncidentCreateEvent"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Notified",
            "schema": {
              "$ref": "#/definitions/EventSubscription"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/listener/incidentStateChangeEvent": {
      "post": {
        "description": "Example of a client listener for receiving the notification IncidentStateChangeEvent",
        "tags": [
          "notification listeners (client side)"
        ],
        "summary": "Client listener for entity IncidentStateChangeEvent",
        "operationId": "listenToIncidentStateChangeEvent",
        "parameters": [
          {
            "description": "The event data",
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/IncidentStateChangeEvent"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Notified",
            "schema": {
              "$ref": "#/definitions/EventSubscription"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/listener/resolveIncidentCreateEvent": {
      "post": {
        "description": "Example of a client listener for receiving the notification ResolveIncidentCreateEvent",
        "tags": [
          "notification listeners (client side)"
        ],
        "summary": "Client listener for entity ResolveIncidentCreateEvent",
        "operationId": "listenToResolveIncidentCreateEvent",
        "parameters": [
          {
            "description": "The event data",
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ResolveIncidentCreateEvent"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Notified",
            "schema": {
              "$ref": "#/definitions/EventSubscription"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/listener/resolveIncidentStateChangeEvent": {
      "post": {
        "description": "Example of a client listener for receiving the notification ResolveIncidentStateChangeEvent",
        "tags": [
          "notification listeners (client side)"
        ],
        "summary": "Client listener for entity ResolveIncidentStateChangeEvent",
        "operationId": "listenToResolveIncidentStateChangeEvent",
        "parameters": [
          {
            "description": "The event data",
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ResolveIncidentStateChangeEvent"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Notified",
            "schema": {
              "$ref": "#/definitions/EventSubscription"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/resolveIncident": {
      "get": {
        "description": "This operation list or find ResolveIncident entities",
        "tags": [
          "resolveIncident"
        ],
        "summary": "List or find ResolveIncident objects",
        "operationId": "listResolveIncident",
        "parameters": [
          {
            "type": "string",
            "description": "Comma-separated properties to be provided in response",
            "name": "fields",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "Requested index for start of resources to be provided in response",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "Requested number of resources to be provided in response",
            "name": "limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ResolveIncident"
              }
            },
            "headers": {
              "X-Result-Count": {
                "type": "integer",
                "description": "Actual number of items returned in the response body"
              },
              "X-Total-Count": {
                "type": "integer",
                "description": "Total number of items matching criteria"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "description": "This operation creates a ResolveIncident entity.",
        "tags": [
          "resolveIncident"
        ],
        "summary": "Creates a ResolveIncident",
        "operationId": "createResolveIncident",
        "parameters": [
          {
            "description": "The ResolveIncident to be created",
            "name": "resolveIncident",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ResolveIncident_Create"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/ResolveIncident"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/resolveIncident/{id}": {
      "get": {
        "description": "This operation retrieves a ResolveIncident entity. Attribute selection is enabled for all first level attributes.",
        "tags": [
          "resolveIncident"
        ],
        "summary": "Retrieves a ResolveIncident by ID",
        "operationId": "retrieveResolveIncident",
        "parameters": [
          {
            "type": "string",
            "description": "Identifier of the ResolveIncident",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Comma-separated properties to provide in response",
            "name": "fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ResolveIncident"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Addressable": {
      "description": "Base schema for adressable entities",
      "type": "object",
      "properties": {
        "href": {
          "description": "Hyperlink reference",
          "type": "string",
          "format": "uri"
        },
        "id": {
          "description": "unique identifier",
          "type": "string"
        }
      }
    },
    "Any": {},
    "Characteristic": {
      "description": "Describes a given characteristic of an object or entity through a name/value pair.",
      "type": "object",
      "required": [
        "name",
        "value"
      ],
      "properties": {
        "@baseType": {
          "description": "When sub-classing, this defines the super-class",
          "type": "string"
        },
        "@schemaLocation": {
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
          "type": "string",
          "format": "uri"
        },
        "@type": {
          "description": "When sub-classing, this defines the sub-class Extensible name",
          "type": "string"
        },
        "characteristicRelationship": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CharacteristicRelationship"
          }
        },
        "id": {
          "description": "Unique identifier of the characteristic",
          "type": "string"
        },
        "name": {
          "description": "Name of the characteristic",
          "type": "string"
        },
        "value": {
          "description": "The value of the characteristic",
          "$ref": "#/definitions/Any"
        },
        "valueType": {
          "description": "Data type of the value of the characteristic",
          "type": "string"
        }
      }
    },
    "CharacteristicRelationship": {
      "description": "Another Characteristic that is related to the current Characteristic.",
      "type": "object",
      "properties": {
        "@baseType": {
          "description": "When sub-classing, this defines the super-class",
          "type": "string"
        },
        "@schemaLocation": {
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
          "type": "string",
          "format": "uri"
        },
        "@type": {
          "description": "When sub-classing, this defines the sub-class Extensible name",
          "type": "string"
        },
        "href": {
          "description": "Hyperlink reference",
          "type": "string",
          "format": "uri"
        },
        "id": {
          "description": "Unique identifier of the characteristic",
          "type": "string"
        },
        "relationshipType": {
          "description": "The type of relationship",
          "type": "string"
        }
      }
    },
    "DiagnoseIncident": {
      "description": "A stage in the incident lifecycle. The purpose of diagnosis is to identify a workaround for an incident (ITIL Service Operation). \nDiagnosing Incidents by Incident SN",
      "type": "object",
      "properties": {
        "@baseType": {
          "description": "When sub-classing, this defines the super-class",
          "type": "string"
        },
        "@schemaLocation": {
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
          "type": "string",
          "format": "uri"
        },
        "@type": {
          "description": "When sub-classing, this defines the sub-class Extensible name",
          "type": "string"
        },
        "errorLog": {
          "description": "Reason for failure",
          "type": "string"
        },
        "href": {
          "description": "Reference of the diagnose incident task",
          "type": "string",
          "format": "uri"
        },
        "id": {
          "description": "unique identifier",
          "type": "string"
        },
        "incident": {
          "$ref": "#/definitions/IncidentRef"
        },
        "state": {
          "$ref": "#/definitions/TaskStateType"
        }
      }
    },
    "DiagnoseIncidentCreateEvent": {
      "description": "The notification data structure",
      "type": "object",
      "properties": {
        "correlationId": {
          "description": "The correlation id for this event.",
          "type": "string"
        },
        "description": {
          "description": "An explnatory of the event.",
          "type": "string"
        },
        "domain": {
          "description": "The domain of the event.",
          "type": "string"
        },
        "event": {
          "description": "The event payload linked to the involved resource object",
          "$ref": "#/definitions/DiagnoseIncidentCreateEventPayload"
        },
        "eventId": {
          "description": "The identifier of the notification.",
          "type": "string"
        },
        "eventTime": {
          "description": "Time of the event occurrence.",
          "type": "string",
          "format": "date-time"
        },
        "eventType": {
          "description": "The type of the notification.",
          "type": "string"
        },
        "priority": {
          "description": "A priority.",
          "type": "string"
        },
        "timeOcurred": {
          "description": "The time the event occured.",
          "type": "string",
          "format": "date-time"
        },
        "title": {
          "description": "The title of the event.",
          "type": "string"
        }
      }
    },
    "DiagnoseIncidentCreateEventPayload": {
      "description": "The event data structure",
      "type": "object",
      "properties": {
        "diagnoseIncident": {
          "description": "The involved resource data for the event",
          "$ref": "#/definitions/DiagnoseIncident"
        }
      }
    },
    "DiagnoseIncidentStateChangeEvent": {
      "description": "The notification data structure",
      "type": "object",
      "properties": {
        "correlationId": {
          "description": "The correlation id for this event.",
          "type": "string"
        },
        "description": {
          "description": "An explnatory of the event.",
          "type": "string"
        },
        "domain": {
          "description": "The domain of the event.",
          "type": "string"
        },
        "event": {
          "description": "The event payload linked to the involved resource object",
          "$ref": "#/definitions/DiagnoseIncidentStateChangeEventPayload"
        },
        "eventId": {
          "description": "The identifier of the notification.",
          "type": "string"
        },
        "eventTime": {
          "description": "Time of the event occurrence.",
          "type": "string",
          "format": "date-time"
        },
        "eventType": {
          "description": "The type of the notification.",
          "type": "string"
        },
        "priority": {
          "description": "A priority.",
          "type": "string"
        },
        "timeOcurred": {
          "description": "The time the event occured.",
          "type": "string",
          "format": "date-time"
        },
        "title": {
          "description": "The title of the event.",
          "type": "string"
        }
      }
    },
    "DiagnoseIncidentStateChangeEventPayload": {
      "description": "The event data structure",
      "type": "object",
      "properties": {
        "diagnoseIncident": {
          "description": "The involved resource data for the event",
          "$ref": "#/definitions/DiagnoseIncident"
        }
      }
    },
    "DiagnoseIncident_Create": {
      "description": "A stage in the incident lifecycle. The purpose of diagnosis is to identify a workaround for an incident (ITIL Service Operation). \nDiagnosing Incidents by Incident SN\nSkipped properties: id,href",
      "type": "object",
      "required": [
        "incident"
      ],
      "properties": {
        "@baseType": {
          "description": "When sub-classing, this defines the super-class",
          "type": "string"
        },
        "@schemaLocation": {
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
          "type": "string",
          "format": "uri"
        },
        "@type": {
          "description": "When sub-classing, this defines the sub-class Extensible name",
          "type": "string"
        },
        "errorLog": {
          "description": "Reason for failure",
          "type": "string"
        },
        "incident": {
          "$ref": "#/definitions/IncidentRef"
        },
        "state": {
          "$ref": "#/definitions/TaskStateType"
        }
      }
    },
    "Entity": {
      "description": "Base entity schema for use in TMForum Open-APIs",
      "type": "object",
      "properties": {
        "@baseType": {
          "description": "When sub-classing, this defines the super-class",
          "type": "string"
        },
        "@schemaLocation": {
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
          "type": "string",
          "format": "uri"
        },
        "@type": {
          "description": "When sub-classing, this defines the sub-class Extensible name",
          "type": "string"
        },
        "href": {
          "description": "Hyperlink reference",
          "type": "string",
          "format": "uri"
        },
        "id": {
          "description": "unique identifier",
          "type": "string"
        }
      }
    },
    "EntityRef": {
      "description": "Entity reference schema to be use for all entityRef class.",
      "type": "object",
      "required": [
        "id"
      ],
      "properties": {
        "@baseType": {
          "description": "When sub-classing, this defines the super-class",
          "type": "string"
        },
        "@referredType": {
          "description": "The actual type of the target instance when needed for disambiguation.",
          "type": "string"
        },
        "@schemaLocation": {
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
          "type": "string",
          "format": "uri"
        },
        "@type": {
          "description": "When sub-classing, this defines the sub-class Extensible name",
          "type": "string"
        },
        "href": {
          "description": "Hyperlink reference",
          "type": "string",
          "format": "uri"
        },
        "id": {
          "description": "unique identifier",
          "type": "string"
        },
        "name": {
          "description": "Name of the related entity.",
          "type": "string"
        }
      }
    },
    "Error": {
      "description": "Used when an API throws an Error, typically with a HTTP error response-code (3xx, 4xx, 5xx)",
      "type": "object",
      "required": [
        "code",
        "reason"
      ],
      "properties": {
        "@baseType": {
          "description": "When sub-classing, this defines the super-class.",
          "type": "string"
        },
        "@schemaLocation": {
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
          "type": "string",
          "format": "uri"
        },
        "@type": {
          "description": "When sub-classing, this defines the sub-class entity name.",
          "type": "string"
        },
        "code": {
          "description": "Application relevant detail, defined in the API or a common list.",
          "type": "string"
        },
        "message": {
          "description": "More details and corrective actions related to the error which can be shown to a client user.",
          "type": "string"
        },
        "reason": {
          "description": "Explanation of the reason for the error which can be shown to a client user.",
          "type": "string"
        },
        "referenceError": {
          "description": "URI of documentation describing the error.",
          "type": "string",
          "format": "uri"
        },
        "status": {
          "description": "HTTP Error code extension",
          "type": "string"
        }
      }
    },
    "EventSubscription": {
      "description": "Sets the communication endpoint address the service instance must use to deliver notification information",
      "type": "object",
      "required": [
        "id",
        "callback"
      ],
      "properties": {
        "callback": {
          "description": "The callback being registered.",
          "type": "string"
        },
        "id": {
          "description": "Id of the listener",
          "type": "string"
        },
        "query": {
          "description": "additional data to be passed",
          "type": "string"
        }
      }
    },
    "EventSubscriptionInput": {
      "description": "Sets the communication endpoint address the service instance must use to deliver notification information",
      "type": "object",
      "required": [
        "callback"
      ],
      "properties": {
        "callback": {
          "description": "The callback being registered.",
          "type": "string"
        },
        "query": {
          "description": "additional data to be passed",
          "type": "string"
        }
      }
    },
    "Extensible": {
      "description": "Base Extensible schema for use in TMForum Open-APIs",
      "type": "object",
      "properties": {
        "@baseType": {
          "description": "When sub-classing, this defines the super-class",
          "type": "string"
        },
        "@schemaLocation": {
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
          "type": "string",
          "format": "uri"
        },
        "@type": {
          "description": "When sub-classing, this defines the sub-class Extensible name",
          "type": "string"
        }
      }
    },
    "ExternalIdentifier": {
      "description": "An identification of an entity that is owned by or originates in a software system different from the current system, for example a ProductOrder handed off from a commerce platform into an order handling system. The structure identifies the system itself, the nature of the entity within the system (e.g. class name) and the unique ID of the entity within the system. It is anticipated that multiple external IDs can be held for a single entity, e.g. if the entity passed through multiple systems on the way to the current system. In this case the consumer is expected to sequence the IDs in the array in reverse order of provenance, i.e. most recent system first in the list.",
      "type": "object",
      "required": [
        "id"
      ],
      "properties": {
        "@baseType": {
          "description": "When sub-classing, this defines the super-class",
          "type": "string"
        },
        "@schemaLocation": {
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
          "type": "string",
          "format": "uri"
        },
        "@type": {
          "description": "When sub-classing, this defines the sub-class Extensible name",
          "type": "string"
        },
        "externalIdentifierType": {
          "description": "Type of the identification, typically would be the type of the entity within the external system",
          "type": "string",
          "example": "ProductOrder"
        },
        "href": {
          "description": "Hyperlink reference",
          "type": "string",
          "format": "uri"
        },
        "id": {
          "description": "identification of the entity within the external system.",
          "type": "string",
          "example": "MC2255771199555"
        },
        "owner": {
          "description": "Name of the external system that owns the entity.",
          "type": "string",
          "example": "MagentoCommerce"
        }
      }
    },
    "ImpactType": {
      "description": "Possible values for the impact of an Incident",
      "type": "string",
      "enum": [
        "extensive",
        "significant",
        "moderate",
        "minor"
      ]
    },
    "Incident": {
      "description": "An Incident is a record of an event that has altered the operational state of a entity (Resource, Service or Customers Product). An incident represents an issue that needs to be diagnosed and resolved.",
      "type": "object",
      "properties": {
        "@baseType": {
          "description": "When sub-classing, this defines the super-class",
          "type": "string"
        },
        "@schemaLocation": {
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
          "type": "string",
          "format": "uri"
        },
        "@type": {
          "description": "When sub-classing, this defines the sub-class Extensible name",
          "type": "string"
        },
        "ackState": {
          "description": "Provides the Acknowledgement State of the incident (unacknowledged | acknowledged).",
          "$ref": "#/definitions/IncidentAckStateType"
        },
        "ackTime": {
          "description": "The ackTime or acknowledgeTime of the incident. An acknowledged incident is being worked on, but is not yet resolved",
          "type": "string",
          "format": "date-time",
          "example": "2022-03-10T04:01:12Z"
        },
        "affectedEntity": {
          "description": "List of affected entities ",
          "type": "array",
          "items": {
            "$ref": "#/definitions/EntityRef"
          },
          "example": "e.g  a ref to a service or resource"
        },
        "category": {
          "description": "The category of the incident  (category is the term used by ITU) ",
          "type": "string",
          "example": "BTS Software Fault"
        },
        "clearTime": {
          "description": "The clear time of the incident",
          "type": "string",
          "format": "date-time",
          "example": "2022-03-10T04:01:12Z"
        },
        "domain": {
          "description": "The domain of the incident, for example RAN, PON, OTN, Cross-Domain etc",
          "type": "string"
        },
        "eventId": {
          "description": "The correlation event object such as alarm, externalAlarm, performance, etc.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResourceEntity"
          }
        },
        "extensionInfo": {
          "description": "This is used for extend the incident with attributes",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Characteristic"
          }
        },
        "externalIdentifier": {
          "description": "An identification of an entity that is owned by or originates in a software system different from the current system, for example a ProductOrder handed off from a commerce platform into an order handling system. The structure identifies the system itself, the nature of the entity within the system (e.g. class name) and the unique ID of the entity within the system. It is anticipated that multiple external IDs can be held for a single entity, e.g. if the entity passed through multiple systems on the way to the current system. In this case the consumer is expected to sequence the IDs in the array in reverse order of provenance, i.e. most recent system first in the list.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExternalIdentifier"
          }
        },
        "href": {
          "description": "Hyperlink, a reference to the incident entity",
          "type": "string"
        },
        "id": {
          "description": "unique identifier",
          "type": "string"
        },
        "impact": {
          "description": "Impact which indicates the degree of impact on affected services or users. This field is optional. The options are extensive, significant, moderate, and minor",
          "$ref": "#/definitions/ImpactType"
        },
        "incidentDetail": {
          "description": "A textual succinct description of the nature, symptoms, cause, or effect of the incident.",
          "type": "string"
        },
        "incidentResolutionSuggestion": {
          "description": "Incident resolution suggestion or tip to resolve the incident",
          "type": "string"
        },
        "name": {
          "description": "The name of the incident. A short-form string that provides succinct, important information about the incident",
          "type": "string"
        },
        "occurTime": {
          "description": "Indicates the time (as a date + time) at which the incident occurred at its source",
          "type": "string",
          "format": "date-time",
          "example": "2022-03-10T04:01:12Z"
        },
        "priority": {
          "description": "The priority  of the incident, priority  critical/high/medium/low",
          "$ref": "#/definitions/PriorityType"
        },
        "rootCause": {
          "description": "A root cause is a fundamental or underlying reason behind why an incident occurred that identifies one or more failures. An incident many have multiple rootCauses",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RootCause"
          }
        },
        "rootEventId": {
          "description": "The root event object such as alarm, externalAlarm, performance, etc.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResourceEntity"
          }
        },
        "sourceObject": {
          "description": "The objects show the incident, it may be part of Network Equipment. Fault object, which may be an NE or a port.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResourceEntity"
          },
          "example": "e.g. weak optical signals, the fault object is a PON port, the root cause is an optical splitter, and the affected object is an ONU"
        },
        "state": {
          "description": "Incident state. The options are raised | updated | cleared. Cleared means Resolved)",
          "$ref": "#/definitions/IncidentStateType"
        },
        "updateTime": {
          "description": "The last update time  of the incident",
          "type": "string",
          "example": "2022-03-10T04:01:12Z"
        },
        "urgency": {
          "description": "Urgency is the speed required for resolving the service issues. A measure of how long it will be until an incident has a significant impact on the business. This field is optional. The options are critical, high, medium, and low",
          "$ref": "#/definitions/UrgencyType"
        }
      }
    },
    "IncidentAckStateType": {
      "description": "Possible values for the ack state of an Incident",
      "type": "string",
      "enum": [
        "acknowledged",
        "unacknowledged"
      ]
    },
    "IncidentCreateEvent": {
      "description": "The notification data structure",
      "type": "object",
      "properties": {
        "correlationId": {
          "description": "The correlation id for this event.",
          "type": "string"
        },
        "description": {
          "description": "An explnatory of the event.",
          "type": "string"
        },
        "domain": {
          "description": "The domain of the event.",
          "type": "string"
        },
        "event": {
          "description": "The event payload linked to the involved resource object",
          "$ref": "#/definitions/IncidentCreateEventPayload"
        },
        "eventId": {
          "description": "The identifier of the notification.",
          "type": "string"
        },
        "eventTime": {
          "description": "Time of the event occurrence.",
          "type": "string",
          "format": "date-time"
        },
        "eventType": {
          "description": "The type of the notification.",
          "type": "string"
        },
        "priority": {
          "description": "A priority.",
          "type": "string"
        },
        "timeOcurred": {
          "description": "The time the event occured.",
          "type": "string",
          "format": "date-time"
        },
        "title": {
          "description": "The title of the event.",
          "type": "string"
        }
      }
    },
    "IncidentCreateEventPayload": {
      "description": "The event data structure",
      "type": "object",
      "properties": {
        "incident": {
          "description": "The involved resource data for the event",
          "$ref": "#/definitions/Incident"
        }
      }
    },
    "IncidentRef": {
      "description": "Incident reference.",
      "type": "object",
      "required": [
        "id"
      ],
      "properties": {
        "@baseType": {
          "description": "When sub-classing, this defines the super-class",
          "type": "string"
        },
        "@referredType": {
          "description": "The actual type of the target instance when needed for disambiguation.",
          "type": "string"
        },
        "@schemaLocation": {
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
          "type": "string",
          "format": "uri"
        },
        "@type": {
          "description": "When sub-classing, this defines the sub-class Extensible name",
          "type": "string"
        },
        "href": {
          "description": "Hyperlink reference",
          "type": "string",
          "format": "uri"
        },
        "id": {
          "description": "unique identifier",
          "type": "string"
        },
        "name": {
          "description": "Name of the related incident",
          "type": "string"
        }
      }
    },
    "IncidentStateChangeEvent": {
      "description": "The notification data structure",
      "type": "object",
      "properties": {
        "correlationId": {
          "description": "The correlation id for this event.",
          "type": "string"
        },
        "description": {
          "description": "An explnatory of the event.",
          "type": "string"
        },
        "domain": {
          "description": "The domain of the event.",
          "type": "string"
        },
        "event": {
          "description": "The event payload linked to the involved resource object",
          "$ref": "#/definitions/IncidentStateChangeEventPayload"
        },
        "eventId": {
          "description": "The identifier of the notification.",
          "type": "string"
        },
        "eventTime": {
          "description": "Time of the event occurrence.",
          "type": "string",
          "format": "date-time"
        },
        "eventType": {
          "description": "The type of the notification.",
          "type": "string"
        },
        "priority": {
          "description": "A priority.",
          "type": "string"
        },
        "timeOcurred": {
          "description": "The time the event occured.",
          "type": "string",
          "format": "date-time"
        },
        "title": {
          "description": "The title of the event.",
          "type": "string"
        }
      }
    },
    "IncidentStateChangeEventPayload": {
      "description": "The event data structure",
      "type": "object",
      "properties": {
        "incident": {
          "description": "The involved resource data for the event",
          "$ref": "#/definitions/Incident"
        }
      }
    },
    "IncidentStateType": {
      "description": "Possible values for the state of an Incident",
      "type": "string",
      "enum": [
        "raised",
        "updated",
        "cleared"
      ]
    },
    "Incident_Create": {
      "description": "An Incident is a record of an event that has altered the operational state of a entity (Resource, Service or Customers Product). An incident represents an issue that needs to be diagnosed and resolved.\nSkipped properties: id,href,lifecycleStatus,creationDate,statusChangeDate",
      "type": "object",
      "required": [
        "name",
        "category",
        "priority",
        "state",
        "ackState",
        "occurTime",
        "domain",
        "sourceObject"
      ],
      "properties": {
        "@baseType": {
          "description": "When sub-classing, this defines the super-class",
          "type": "string"
        },
        "@schemaLocation": {
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
          "type": "string",
          "format": "uri"
        },
        "@type": {
          "description": "When sub-classing, this defines the sub-class Extensible name",
          "type": "string"
        },
        "ackState": {
          "description": "Provides the Acknowledgement State of the incident (unacknowledged | acknowledged).",
          "$ref": "#/definitions/IncidentAckStateType"
        },
        "ackTime": {
          "description": "The ackTime or acknowledgeTime of the incident. An acknowledged incident is being worked on, but is not yet resolved",
          "type": "string",
          "format": "date-time",
          "example": "2022-03-10T04:01:12Z"
        },
        "affectedEntity": {
          "description": "List of affected entities ",
          "type": "array",
          "items": {
            "$ref": "#/definitions/EntityRef"
          },
          "example": "e.g  a ref to a service or resource"
        },
        "category": {
          "description": "The category of the incident  (category is the term used by ITU) ",
          "type": "string",
          "example": "BTS Software Fault"
        },
        "clearTime": {
          "description": "The clear time of the incident",
          "type": "string",
          "format": "date-time",
          "example": "2022-03-10T04:01:12Z"
        },
        "domain": {
          "description": "The domain of the incident, for example RAN, PON, OTN, Cross-Domain etc",
          "type": "string"
        },
        "eventId": {
          "description": "The correlation event object such as alarm, externalAlarm, performance, etc.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResourceEntity"
          }
        },
        "extensionInfo": {
          "description": "This is used for extend the incident with attributes",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Characteristic"
          }
        },
        "externalIdentifier": {
          "description": "An identification of an entity that is owned by or originates in a software system different from the current system, for example a ProductOrder handed off from a commerce platform into an order handling system. The structure identifies the system itself, the nature of the entity within the system (e.g. class name) and the unique ID of the entity within the system. It is anticipated that multiple external IDs can be held for a single entity, e.g. if the entity passed through multiple systems on the way to the current system. In this case the consumer is expected to sequence the IDs in the array in reverse order of provenance, i.e. most recent system first in the list.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExternalIdentifier"
          }
        },
        "impact": {
          "description": "Impact which indicates the degree of impact on affected services or users. This field is optional. The options are extensive, significant, moderate, and minor",
          "$ref": "#/definitions/ImpactType"
        },
        "incidentDetail": {
          "description": "A textual succinct description of the nature, symptoms, cause, or effect of the incident.",
          "type": "string"
        },
        "incidentResolutionSuggestion": {
          "description": "Incident resolution suggestion or tip to resolve the incident",
          "type": "string"
        },
        "name": {
          "description": "The name of the incident. A short-form string that provides succinct, important information about the incident",
          "type": "string"
        },
        "occurTime": {
          "description": "Indicates the time (as a date + time) at which the incident occurred at its source",
          "type": "string",
          "format": "date-time",
          "example": "2022-03-10T04:01:12Z"
        },
        "priority": {
          "description": "The priority  of the incident, priority  critical/high/medium/low",
          "$ref": "#/definitions/PriorityType"
        },
        "rootCause": {
          "description": "A root cause is a fundamental or underlying reason behind why an incident occurred that identifies one or more failures. An incident many have multiple rootCauses",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RootCause"
          }
        },
        "rootEventId": {
          "description": "The root event object such as alarm, externalAlarm, performance, etc.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResourceEntity"
          }
        },
        "sourceObject": {
          "description": "The objects show the incident, it may be part of Network Equipment. Fault object, which may be an NE or a port.",
          "type": "array",
          "minItems": 1,
          "items": {
            "$ref": "#/definitions/ResourceEntity"
          },
          "example": "e.g. weak optical signals, the fault object is a PON port, the root cause is an optical splitter, and the affected object is an ONU"
        },
        "state": {
          "description": "Incident state. The options are raised | updated | cleared. Cleared means Resolved)",
          "$ref": "#/definitions/IncidentStateType"
        },
        "updateTime": {
          "description": "The last update time  of the incident",
          "type": "string",
          "example": "2022-03-10T04:01:12Z"
        },
        "urgency": {
          "description": "Urgency is the speed required for resolving the service issues. A measure of how long it will be until an incident has a significant impact on the business. This field is optional. The options are critical, high, medium, and low",
          "$ref": "#/definitions/UrgencyType"
        }
      }
    },
    "PriorityType": {
      "description": "Possible values for the Priority of an Incident",
      "type": "string",
      "enum": [
        "critical",
        "high",
        "medium",
        "low"
      ]
    },
    "ResolveIncident": {
      "description": "An incident resolution is an action taken to resolve/repair the root cause of an incident or problem, or to implement a workaround",
      "type": "object",
      "properties": {
        "@baseType": {
          "description": "When sub-classing, this defines the super-class",
          "type": "string"
        },
        "@schemaLocation": {
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
          "type": "string",
          "format": "uri"
        },
        "@type": {
          "description": "When sub-classing, this defines the sub-class Extensible name",
          "type": "string"
        },
        "clearTime": {
          "description": "The clear time  of the incident, for example 2020-03-10T04:01:12Z",
          "type": "string"
        },
        "errorLog": {
          "description": "Reason for failure",
          "type": "string"
        },
        "href": {
          "description": "Reference of the resolve incident task",
          "type": "string",
          "format": "uri"
        },
        "id": {
          "description": "Identifier of the  incident to resolve",
          "type": "string"
        },
        "incident": {
          "$ref": "#/definitions/IncidentRef"
        },
        "state": {
          "$ref": "#/definitions/TaskStateType"
        }
      }
    },
    "ResolveIncidentCreateEvent": {
      "description": "The notification data structure",
      "type": "object",
      "properties": {
        "correlationId": {
          "description": "The correlation id for this event.",
          "type": "string"
        },
        "description": {
          "description": "An explnatory of the event.",
          "type": "string"
        },
        "domain": {
          "description": "The domain of the event.",
          "type": "string"
        },
        "event": {
          "description": "The event payload linked to the involved resource object",
          "$ref": "#/definitions/ResolveIncidentCreateEventPayload"
        },
        "eventId": {
          "description": "The identifier of the notification.",
          "type": "string"
        },
        "eventTime": {
          "description": "Time of the event occurrence.",
          "type": "string",
          "format": "date-time"
        },
        "eventType": {
          "description": "The type of the notification.",
          "type": "string"
        },
        "priority": {
          "description": "A priority.",
          "type": "string"
        },
        "timeOcurred": {
          "description": "The time the event occured.",
          "type": "string",
          "format": "date-time"
        },
        "title": {
          "description": "The title of the event.",
          "type": "string"
        }
      }
    },
    "ResolveIncidentCreateEventPayload": {
      "description": "The event data structure",
      "type": "object",
      "properties": {
        "resolveIncident": {
          "description": "The involved resource data for the event",
          "$ref": "#/definitions/ResolveIncident"
        }
      }
    },
    "ResolveIncidentStateChangeEvent": {
      "description": "The notification data structure",
      "type": "object",
      "properties": {
        "correlationId": {
          "description": "The correlation id for this event.",
          "type": "string"
        },
        "description": {
          "description": "An explnatory of the event.",
          "type": "string"
        },
        "domain": {
          "description": "The domain of the event.",
          "type": "string"
        },
        "event": {
          "description": "The event payload linked to the involved resource object",
          "$ref": "#/definitions/ResolveIncidentStateChangeEventPayload"
        },
        "eventId": {
          "description": "The identifier of the notification.",
          "type": "string"
        },
        "eventTime": {
          "description": "Time of the event occurrence.",
          "type": "string",
          "format": "date-time"
        },
        "eventType": {
          "description": "The type of the notification.",
          "type": "string"
        },
        "priority": {
          "description": "A priority.",
          "type": "string"
        },
        "timeOcurred": {
          "description": "The time the event occured.",
          "type": "string",
          "format": "date-time"
        },
        "title": {
          "description": "The title of the event.",
          "type": "string"
        }
      }
    },
    "ResolveIncidentStateChangeEventPayload": {
      "description": "The event data structure",
      "type": "object",
      "properties": {
        "resolveIncident": {
          "description": "The involved resource data for the event",
          "$ref": "#/definitions/ResolveIncident"
        }
      }
    },
    "ResolveIncident_Create": {
      "description": "An incident resolution is an action taken to resolve/repair the root cause of an incident or problem, or to implement a workaround\nSkipped properties: id,href",
      "type": "object",
      "required": [
        "incident"
      ],
      "properties": {
        "@baseType": {
          "description": "When sub-classing, this defines the super-class",
          "type": "string"
        },
        "@schemaLocation": {
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
          "type": "string",
          "format": "uri"
        },
        "@type": {
          "description": "When sub-classing, this defines the sub-class Extensible name",
          "type": "string"
        },
        "clearTime": {
          "description": "The clear time  of the incident, for example 2020-03-10T04:01:12Z",
          "type": "string"
        },
        "errorLog": {
          "description": "Reason for failure",
          "type": "string"
        },
        "incident": {
          "$ref": "#/definitions/IncidentRef"
        },
        "state": {
          "$ref": "#/definitions/TaskStateType"
        }
      }
    },
    "ResourceEntity": {
      "description": "Base schema for REST Resources",
      "type": "object",
      "properties": {
        "@baseType": {
          "description": "When sub-classing, this defines the super-class",
          "type": "string"
        },
        "@schemaLocation": {
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
          "type": "string",
          "format": "uri"
        },
        "@type": {
          "description": "When sub-classing, this defines the sub-class Extensible name",
          "type": "string"
        },
        "href": {
          "description": "Hyperlink to access the test resource",
          "type": "string",
          "example": "http://myservice.com/resource-path"
        },
        "id": {
          "description": "ID created by the implementing service",
          "type": "string",
          "example": "aac9969d-219d-4ff1-b256-1765dcf9b342"
        }
      }
    },
    "RootCause": {
      "description": "The name of RootCause, for example:Power Down",
      "type": "object",
      "required": [
        "location"
      ],
      "properties": {
        "@baseType": {
          "description": "When sub-classing, this defines the super-class",
          "type": "string"
        },
        "@schemaLocation": {
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
          "type": "string",
          "format": "uri"
        },
        "@type": {
          "description": "When sub-classing, this defines the sub-class Extensible name",
          "type": "string"
        },
        "href": {
          "description": "Hyperlink reference",
          "type": "string",
          "format": "uri"
        },
        "id": {
          "description": "unique identifier",
          "type": "string"
        },
        "location": {
          "type": "string",
          "example": "Ne Name=cc_lte1, Cabinet No.=0, Subrack No.=0, Slot No.=0"
        }
      }
    },
    "TaskStateType": {
      "description": "Possible values for the state of a task",
      "type": "string",
      "enum": [
        "accepted",
        "terminatedWithError",
        "inProgress",
        "done"
      ]
    },
    "UrgencyType": {
      "description": "Possible values for the urgency of an Incident",
      "type": "string",
      "enum": [
        "critical",
        "high",
        "medium",
        "low"
      ]
    }
  },
  "tags": [
    {
      "name": "incident"
    },
    {
      "name": "diagnoseIncident"
    },
    {
      "name": "resolveIncident"
    },
    {
      "name": "notification listeners (client side)"
    },
    {
      "name": "events subscription"
    }
  ]
}`))
}
