// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// UrgencyType Possible values for the urgency of an Incident
//
// swagger:model UrgencyType
type UrgencyType string

func NewUrgencyType(value UrgencyType) *UrgencyType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated UrgencyType.
func (m UrgencyType) Pointer() *UrgencyType {
	return &m
}

const (

	// UrgencyTypeCritical captures enum value "critical"
	UrgencyTypeCritical UrgencyType = "critical"

	// UrgencyTypeHigh captures enum value "high"
	UrgencyTypeHigh UrgencyType = "high"

	// UrgencyTypeMedium captures enum value "medium"
	UrgencyTypeMedium UrgencyType = "medium"

	// UrgencyTypeLow captures enum value "low"
	UrgencyTypeLow UrgencyType = "low"
)

// for schema
var urgencyTypeEnum []interface{}

func init() {
	var res []UrgencyType
	if err := json.Unmarshal([]byte(`["critical","high","medium","low"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		urgencyTypeEnum = append(urgencyTypeEnum, v)
	}
}

func (m UrgencyType) validateUrgencyTypeEnum(path, location string, value UrgencyType) error {
	if err := validate.EnumCase(path, location, value, urgencyTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this urgency type
func (m UrgencyType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateUrgencyTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this urgency type based on context it is used
func (m UrgencyType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
