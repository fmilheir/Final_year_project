// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// PriorityType Possible values for the Priority of an Incident
//
// swagger:model PriorityType
type PriorityType string

func NewPriorityType(value PriorityType) *PriorityType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated PriorityType.
func (m PriorityType) Pointer() *PriorityType {
	return &m
}

const (

	// PriorityTypeCritical captures enum value "critical"
	PriorityTypeCritical PriorityType = "critical"

	// PriorityTypeHigh captures enum value "high"
	PriorityTypeHigh PriorityType = "high"

	// PriorityTypeMedium captures enum value "medium"
	PriorityTypeMedium PriorityType = "medium"

	// PriorityTypeLow captures enum value "low"
	PriorityTypeLow PriorityType = "low"
)

// for schema
var priorityTypeEnum []interface{}

func init() {
	var res []PriorityType
	if err := json.Unmarshal([]byte(`["critical","high","medium","low"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		priorityTypeEnum = append(priorityTypeEnum, v)
	}
}

func (m PriorityType) validatePriorityTypeEnum(path, location string, value PriorityType) error {
	if err := validate.EnumCase(path, location, value, priorityTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this priority type
func (m PriorityType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validatePriorityTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this priority type based on context it is used
func (m PriorityType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
