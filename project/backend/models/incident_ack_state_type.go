// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// IncidentAckStateType Possible values for the ack state of an Incident
//
// swagger:model IncidentAckStateType
type IncidentAckStateType string

func NewIncidentAckStateType(value IncidentAckStateType) *IncidentAckStateType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated IncidentAckStateType.
func (m IncidentAckStateType) Pointer() *IncidentAckStateType {
	return &m
}

const (

	// IncidentAckStateTypeAcknowledged captures enum value "acknowledged"
	IncidentAckStateTypeAcknowledged IncidentAckStateType = "acknowledged"

	// IncidentAckStateTypeUnacknowledged captures enum value "unacknowledged"
	IncidentAckStateTypeUnacknowledged IncidentAckStateType = "unacknowledged"
)

// for schema
var incidentAckStateTypeEnum []interface{}

func init() {
	var res []IncidentAckStateType
	if err := json.Unmarshal([]byte(`["acknowledged","unacknowledged"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		incidentAckStateTypeEnum = append(incidentAckStateTypeEnum, v)
	}
}

func (m IncidentAckStateType) validateIncidentAckStateTypeEnum(path, location string, value IncidentAckStateType) error {
	if err := validate.EnumCase(path, location, value, incidentAckStateTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this incident ack state type
func (m IncidentAckStateType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateIncidentAckStateTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this incident ack state type based on context it is used
func (m IncidentAckStateType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
