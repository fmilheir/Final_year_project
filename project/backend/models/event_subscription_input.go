// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// EventSubscriptionInput Sets the communication endpoint address the service instance must use to deliver notification information
//
// swagger:model EventSubscriptionInput
type EventSubscriptionInput struct {

	// The callback being registered.
	// Required: true
	Callback *string `json:"callback"`

	// additional data to be passed
	Query string `json:"query,omitempty"`
}

// Validate validates this event subscription input
func (m *EventSubscriptionInput) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCallback(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EventSubscriptionInput) validateCallback(formats strfmt.Registry) error {

	if err := validate.Required("callback", "body", m.Callback); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this event subscription input based on context it is used
func (m *EventSubscriptionInput) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *EventSubscriptionInput) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EventSubscriptionInput) UnmarshalBinary(b []byte) error {
	var res EventSubscriptionInput
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
